[{
		"Name": "ByViewAndFaceAnalysisData",
		"imageFile": ["ByViewAndFaceAnalysisData"],
		"dynFile": ["ByViewAndFaceAnalysisData"],
		"folderPath": "Revit/Analyze/FaceAnalysisDisplay/Create",
		"inDepth": "Add in-depth information about ByViewAndFaceAnalysisData..."
	}, {
		"Name": "ByViewFacePointsAndValues",
		"imageFile": ["ByViewFacePointsAndValues"],
		"dynFile": ["ByViewFacePointsAndValues"],
		"folderPath": "Revit/Analyze/FaceAnalysisDisplay/Create",
		"inDepth": "Add in-depth information about ByViewFacePointsAndValues..."
	}, {
		"Name": "ValueLocations",
		"imageFile": ["ValueLocations"],
		"dynFile": ["ValueLocations"],
		"folderPath": "Revit/Analyze/IStructuredDataOfPointAndDouble/Query",
		"inDepth": ""
	}, {
		"Name": "Values",
		"imageFile": ["Values"],
		"dynFile": ["Values"],
		"folderPath": "Revit/Analyze/IStructuredDataOfPointAndDouble/Query",
		"inDepth": ""
	}, {
		"Name": "ValueLocations",
		"imageFile": ["ValueLocations"],
		"dynFile": ["ValueLocations"],
		"folderPath": "Revit/Analyze/IStructuredDataOfPointAndVector/Query",
		"inDepth": ""
	}, {
		"Name": "Values",
		"imageFile": ["Values"],
		"dynFile": ["Values"],
		"folderPath": "Revit/Analyze/IStructuredDataOfPointAndVector/Query",
		"inDepth": ""
	}, {
		"Name": "ValueLocations",
		"imageFile": ["ValueLocations"],
		"dynFile": ["ValueLocations"],
		"folderPath": "Revit/Analyze/IStructuredDataOfUVAndDouble/Query",
		"inDepth": ""
	}, {
		"Name": "Values",
		"imageFile": ["Values"],
		"dynFile": ["Values"],
		"folderPath": "Revit/Analyze/IStructuredDataOfUVAndDouble/Query",
		"inDepth": ""
	}, {
		"Name": "Surface",
		"imageFile": ["Surface"],
		"dynFile": ["Surface"],
		"folderPath": "Revit/Analyze/ISurfaceDataOfUVAndDouble/Query",
		"inDepth": ""
	}, {
		"Name": "ByViewAndPointAnalysisData",
		"imageFile": ["ByViewAndPointAnalysisData"],
		"dynFile": ["ByViewAndPointAnalysisData"],
		"folderPath": "Revit/Analyze/PointAnalysisDisplay/Create",
		"inDepth": "Add in-depth information about ByViewAndPointAnalysisData..."
	}, {
		"Name": "ByViewPointsAndValues",
		"imageFile": ["ByViewPointsAndValues"],
		"dynFile": ["ByViewPointsAndValues"],
		"folderPath": "Revit/Analyze/PointAnalysisDisplay/Create",
		"inDepth": "Add in-depth information about ByViewPointsAndValues..."
	}, {
		"Name": "Do Cloud Render",
		"imageFile": ["Do Cloud Render"],
		"dynFile": ["Do Cloud Render"],
		"folderPath": "Revit/Analyze/Render/Action",
		"inDepth": "Add in-depth information about Do Cloud Render..."
	}, {
		"Name": "Export Cloud Render Data",
		"imageFile": ["Export Cloud Render Data"],
		"dynFile": ["Export Cloud Render Data"],
		"folderPath": "Revit/Analyze/Render/Action",
		"inDepth": "Add in-depth information about Export Cloud Render Data..."
	}, {
		"Name": "Select RenderQuality",
		"imageFile": ["Select RenderQuality"],
		"dynFile": ["Select RenderQuality"],
		"folderPath": "Revit/Analyze/Render/Action",
		"inDepth": "Add in-depth information about Select RenderQuality..."
	}, {
		"Name": "Select RenderType",
		"imageFile": ["Select RenderType"],
		"dynFile": ["Select RenderType"],
		"folderPath": "Revit/Analyze/Render/Action",
		"inDepth": "Add in-depth information about Select RenderType..."
	}, {
		"Name": "Select SkyModelType",
		"imageFile": ["Select SkyModelType"],
		"dynFile": ["Select SkyModelType"],
		"folderPath": "Revit/Analyze/Render/Action",
		"inDepth": "Add in-depth information about Select SkyModelType..."
	}, {
		"Name": "Upload Cloud Render Data",
		"imageFile": ["Upload Cloud Render Data"],
		"dynFile": ["Upload Cloud Render Data"],
		"folderPath": "Revit/Analyze/Render/Action",
		"inDepth": "Add in-depth information about Upload Cloud Render Data..."
	}, {
		"Name": "SiteLocation",
		"imageFile": ["SiteLocation"],
		"dynFile": ["SiteLocation"],
		"folderPath": "Revit/Analyze/SiteLocation/Action",
		"inDepth": "Add in-depth information about SiteLocation..."
	}, {
		"Name": "ByViewAndVectorAnalysisData",
		"imageFile": ["ByViewAndVectorAnalysisData"],
		"dynFile": ["ByViewAndVectorAnalysisData"],
		"folderPath": "Revit/Analyze/VectorAnalysisDisplay/Create",
		"inDepth": "Add in-depth information about ByViewAndVectorAnalysisData..."
	}, {
		"Name": "ByViewPointsAndVectorValues",
		"imageFile": ["ByViewPointsAndVectorValues"],
		"dynFile": ["ByViewPointsAndVectorValues"],
		"folderPath": "Revit/Analyze/VectorAnalysisDisplay/Create",
		"inDepth": "Add in-depth information about ByViewPointsAndVectorValues..."
	}, {
		"Name": "ActiveView",
		"imageFile": ["ActiveView"],
		"dynFile": ["ActiveView"],
		"folderPath": "Revit/Application/Document/Query",
		"inDepth": "Get the active view for the given document."
	}, {
		"Name": "Current",
		"imageFile": ["Current"],
		"dynFile": ["Current"],
		"folderPath": "Revit/Application/Document/Query",
		"inDepth": "Current returns the Revit document that you are currently working inside of. Switching to another open Revit file or family will change the current document."
	}, {
		"Name": "FilePath",
		"imageFile": ["FilePath"],
		"dynFile": ["FilePath"],
		"folderPath": "Revit/Application/Document/Query",
		"inDepth": "FilePath returns the Revit document's location on your hard drive as a string."
	}, {
		"Name": "IsFamilyDocument",
		"imageFile": ["IsFamilyDocument"],
		"dynFile": ["IsFamilyDocument"],
		"folderPath": "Revit/Application/Document/Query",
		"inDepth": "IsFamilyDocument returns a boolean value based on whether the input document is a family or project file."
	}, {
		"Name": "Location",
		"imageFile": ["Location"],
		"dynFile": ["Location"],
		"folderPath": "Revit/Application/Document/Query",
		"inDepth": "Structural elements have an underlying location line that can be displayed in Revit. This is useful for identifying points of complex framing joins and visualizing offsets."
	}, {
		"Name": "ByParametersOnCurveReference (parameters, curve, familyType)",
		"imageFile": ["ByParametersOnCurveReference (parameters, curve, familyType)"],
		"dynFile": ["ByParametersOnCurveReference (parameters, curve, familyType)"],
		"folderPath": "Revit/Elements/AdaptiveComponent/Create",
		"inDepth": "Create an adaptive component referencing the parameters on a Curve, using the given adaptive component family type."
	}, {
		"Name": "ByParametersOnFace (uvs, surface, familyType)",
		"imageFile": ["ByParametersOnFace (uvs, surface, familyType)"],
		"dynFile": ["ByParametersOnFace (uvs, surface, familyType)"],
		"folderPath": "Revit/Elements/AdaptiveComponent/Create",
		"inDepth": "Create an adaptive component by uv points on a surface, with the given adaptive component family type."
	}, {
		"Name": "ByPoints",
		"imageFile": ["ByPoints"],
		"dynFile": ["ByPoints"],
		"folderPath": "Revit/Elements/AdaptiveComponent/Action",
		"inDepth": "Revit will generate and contour a mesh from a list of supplied points. The points cannot be collinear."
	}, {
		"Name": "Locations",
		"imageFile": ["Locations"],
		"dynFile": ["Locations"],
		"folderPath": "Revit/Elements/AdaptiveComponent/Query",
		"inDepth": "Locations returns the point location of each adaptive point."
	}, {
		"Name": "Type",
		"imageFile": ["Type"],
		"dynFile": ["Type"],
		"folderPath": "Revit/Elements/AdaptiveComponent/Query",
		"inDepth": "Type returns a structural element's family type as well as its parent family."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/Category/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "Id",
		"imageFile": ["Id"],
		"dynFile": ["Id"],
		"folderPath": "Revit/Elements/Category/Query",
		"inDepth": "Id returns a parameter's id as an integer."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/Category/Query",
		"inDepth": "Add in-depth information about Name..."
	}, {
		"Name": "BasePoint",
		"imageFile": ["BasePoint"],
		"dynFile": ["BasePoint"],
		"folderPath": "Revit/Elements/Coordinates/Action",
		"inDepth": "BasePoint creates a point geometry in Dynamo that represents the Revit project's base point."
	}, {
		"Name": "ProjectRotation",
		"imageFile": ["ProjectRotation"],
		"dynFile": ["ProjectRotation"],
		"folderPath": "Revit/Elements/Coordinates/Action",
		"inDepth": "ProjectRotation returns the Revit project's relative rotation in degrees between true north and project north."
	}, {
		"Name": "SurveyPoint",
		"imageFile": ["SurveyPoint"],
		"dynFile": ["SurveyPoint"],
		"folderPath": "Revit/Elements/Coordinates/Action",
		"inDepth": "SurveyPoint creates a point geometry in Dynamo that represents the Revit project's survey point."
	}, {
		"Name": "AsFamilyInstance",
		"imageFile": ["AsFamilyInstance"],
		"dynFile": ["AsFamilyInstance"],
		"folderPath": "Revit/Elements/CurtainPanel/Action",
		"inDepth": "Family instances can be returned for mullions if they are one. In Revit, a family instance provides more detailed properties so that the family instance type and appearance can be changed."
	}, {
		"Name": "ByElement",
		"imageFile": ["ByElement"],
		"dynFile": ["ByElement"],
		"folderPath": "Revit/Elements/CurtainPanel/Action",
		"inDepth": "ByElement tags elements relative to their location points. The offset input can be used to reposition the tags with a vector."
	}, {
		"Name": "SupportingMullions",
		"imageFile": ["SupportingMullions"],
		"dynFile": ["SupportingMullions"],
		"folderPath": "Revit/Elements/CurtainPanel/Action",
		"inDepth": "SupportingMullions returns all mullion elements that host the input curtain panels. Using this in conjunction with CurtainPanel.ByElement enables selection of all elements in a curtain wall system."
	}, {
		"Name": "Boundaries",
		"imageFile": ["Boundaries"],
		"dynFile": ["Boundaries"],
		"folderPath": "Revit/Elements/CurtainPanel/Query",
		"inDepth": "Boundaries returns a polycurve in Dynamo for the boundary of each input curtain panel."
	}, {
		"Name": "HasPlane",
		"imageFile": ["HasPlane"],
		"dynFile": ["HasPlane"],
		"folderPath": "Revit/Elements/CurtainPanel/Query",
		"inDepth": "HasPlane returns a boolean value based on whether an input curtain panel is planar, or completely flat."
	}, {
		"Name": "Height",
		"imageFile": ["Height"],
		"dynFile": ["Height"],
		"folderPath": "Revit/Elements/CurtainPanel/Query",
		"inDepth": "Text note height is returned as a double. The height value is relative to the view scale."
	}, {
		"Name": "IsRectangular",
		"imageFile": ["IsRectangular"],
		"dynFile": ["IsRectangular"],
		"folderPath": "Revit/Elements/CurtainPanel/Query",
		"inDepth": "IsRectangular returns a boolean value based on whether a curtain panel is rectangular or not. Certain CurtainPanel query nodes, such as Height and Width, require that a curtain panel is rectangular."
	}, {
		"Name": "Length",
		"imageFile": ["Length"],
		"dynFile": ["Length"],
		"folderPath": "Revit/Elements/CurtainPanel/Query",
		"inDepth": "Length returns the length of a curtain panel's boundary as a double. This can be used even if the curtain panel is not rectangular."
	}, {
		"Name": "PanelPlane",
		"imageFile": ["PanelPlane"],
		"dynFile": ["PanelPlane"],
		"folderPath": "Revit/Elements/CurtainPanel/Query",
		"inDepth": "PanelPlane returns a plane in Dynamo at the centroid of a curtain panel."
	}, {
		"Name": "Width",
		"imageFile": ["Width"],
		"dynFile": ["Width"],
		"folderPath": "Revit/Elements/CurtainPanel/Query",
		"inDepth": "Width returns the horizontal dimension of a rectangular curtain panel as a double."
	}, {
		"Name": "ByFace",
		"imageFile": ["ByFace"],
		"dynFile": ["ByFace"],
		"folderPath": "Revit/Elements/CurtainSystem/Create",
		"inDepth": "Create Curtain System from face references, given a curtain system type."
	}, {
		"Name": "AddCurtainGrid",
		"imageFile": ["AddCurtainGrid"],
		"dynFile": ["AddCurtainGrid"],
		"folderPath": "Revit/Elements/CurtainSystem/Action",
		"inDepth": "Add Curtain Grid to a given curtain system and the corresponding face."
	}, {
		"Name": "RemoveCurtainGrid",
		"imageFile": ["RemoveCurtainGrid"],
		"dynFile": ["RemoveCurtainGrid"],
		"folderPath": "Revit/Elements/CurtainSystem/Action",
		"inDepth": "Remove Curtain Grid to a given curtain system and the corresponding face."
	}, {
		"Name": "CurtainSystemType",
		"imageFile": ["CurtainSystemType"],
		"dynFile": ["CurtainSystemType"],
		"folderPath": "Revit/Elements/CurtainSystem/Query",
		"inDepth": "Get CurtainSystemType from the input curtain system instance."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/CurtainSystemType/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/CurtainSystemType/Query",
		"inDepth": "The name of the CurtainSystemType."
	}, {
		"Name": "ByReferencePoints",
		"imageFile": ["ByReferencePoints"],
		"dynFile": ["ByReferencePoints"],
		"folderPath": "Revit/Elements/CurveByPoints/Create",
		"inDepth": "ByReferencePoints creates a CurveElement (Model Curve) in Revit from ReferencePoints. ReferencePoints are created in Revit's conceptual design environment."
	}, {
		"Name": "Curve",
		"imageFile": ["Curve"],
		"dynFile": ["Curve"],
		"folderPath": "Revit/Elements/CurveElement/Query",
		"inDepth": "The underlying curves are returned as geometry in Dynamo. Rectilinear Grid elements return underlying geometry consisting of lines."
	}, {
		"Name": "ElementCurveReference",
		"imageFile": ["ElementCurveReference"],
		"dynFile": ["ElementCurveReference"],
		"folderPath": "Revit/Elements/CurveElement/Query",
		"inDepth": "ElementCurveReference returns the underlying Reference for a Grid element. References are not geometry in model space. They are used in the creation of other elements such as Revit dimensions."
	}, {
		"Name": "ByCurve",
		"imageFile": ["ByCurve"],
		"dynFile": ["ByCurve"],
		"folderPath": "Revit/Elements/DetailCurve/Create",
		"inDepth": "Revision clouds created in Dynamo depend on the input curves' directions. If the cloud graphic is facing in, reverse the curve direction."
	}, {
		"Name": "SetCurve",
		"imageFile": ["SetCurve"],
		"dynFile": ["SetCurve"],
		"folderPath": "Revit/Elements/DetailCurve/Action",
		"inDepth": "SetCurve modifies an existing detail curve in Revit by setting it to a new curve in Dynamo. The existing detail curve will be transformed to match the input curve."
	}, {
		"Name": "Curve",
		"imageFile": ["Curve"],
		"dynFile": ["Curve"],
		"folderPath": "Revit/Elements/DetailCurve/Query",
		"inDepth": "The underlying curves are returned as geometry in Dynamo. Rectilinear Grid elements return underlying geometry consisting of lines."
	}, {
		"Name": "ByElements",
		"imageFile": ["ByElements"],
		"dynFile": ["ByElements"],
		"folderPath": "Revit/Elements/Dimension/Create",
		"inDepth": "ByElements creates a Revit dimension defined by its reference elements and inputs for other dimension parameters."
	}, {
		"Name": "SetPrefix",
		"imageFile": ["SetPrefix"],
		"dynFile": ["SetPrefix"],
		"folderPath": "Revit/Elements/Dimension/Action",
		"inDepth": "SetPrefix will add a prefix to all dimensions in the dimension element."
	}, {
		"Name": "SetSuffix",
		"imageFile": ["SetSuffix"],
		"dynFile": ["SetSuffix"],
		"folderPath": "Revit/Elements/Dimension/Action",
		"inDepth": "SetSuffix will add a suffix to all dimensions in the dimension element."
	}, {
		"Name": "SetValueOverride",
		"imageFile": ["SetValueOverride"],
		"dynFile": ["SetValueOverride"],
		"folderPath": "Revit/Elements/Dimension/Action",
		"inDepth": "SetValueOverride will override the dimension values of a dimension element with a provided string."
	}, {
		"Name": "Prefix",
		"imageFile": ["Prefix"],
		"dynFile": ["Prefix"],
		"folderPath": "Revit/Elements/Dimension/Query",
		"inDepth": "Prefix will return each dimension's prefix as a string for an entire dimension element."
	}, {
		"Name": "Suffix",
		"imageFile": ["Suffix"],
		"dynFile": ["Suffix"],
		"folderPath": "Revit/Elements/Dimension/Query",
		"inDepth": "Suffix will return each dimension's suffix as a string for an entire dimension element."
	}, {
		"Name": "Value",
		"imageFile": ["Value"],
		"dynFile": ["Value"],
		"folderPath": "Revit/Elements/Dimension/Query",
		"inDepth": "Get the Dimension Value as double."
	}, {
		"Name": "ValueOverride",
		"imageFile": ["ValueOverride"],
		"dynFile": ["ValueOverride"],
		"folderPath": "Revit/Elements/Dimension/Query",
		"inDepth": "ValueOverride will return each dimension's value override as a string for an entire dimension element."
	}, {
		"Name": "FromExisting",
		"imageFile": ["FromExisting"],
		"dynFile": ["FromExisting"],
		"folderPath": "Revit/Elements/DimensionType/Create",
		"inDepth": "Creates new Dimension Type by duplicating an existing. Supply the existing type and new name."
	}, {
		"Name": "StyleType",
		"imageFile": ["StyleType"],
		"dynFile": ["StyleType"],
		"folderPath": "Revit/Elements/DimensionType/Query",
		"inDepth": "Returns Dimension Style for a givent type. e.g. linear."
	}, {
		"Name": "ByGeometry",
		"imageFile": ["ByGeometry"],
		"dynFile": ["ByGeometry"],
		"folderPath": "Revit/Elements/DirectShape/Create",
		"inDepth": "ByGeometry brings each input geometry into Revit as an individual Import Instance element. An Import Instance is identified as an Import Symbol in Revit."
	}, {
		"Name": "ByMesh",
		"imageFile": ["ByMesh"],
		"dynFile": ["ByMesh"],
		"folderPath": "Revit/Elements/DirectShape/Create",
		"inDepth": "A direct shape allows you to create Revit roofs, walls, floors, etc from imported meshes. Giving an imported mesh a category allows you to apply certain Revit parameters, filters, or display options just as you would to native Revit elements."
	}, {
		"Name": "Select Direct Shape Room Bounding Option",
		"imageFile": ["Select Direct Shape Room Bounding Option"],
		"dynFile": ["Select Direct Shape Room Bounding Option"],
		"folderPath": "Revit/Elements/DirectShape/Action",
		"inDepth": "Select a Direct Shape Room Bounding Option from a drop down."
	}, {
		"Name": "ByCurveAndDivisions (curve, divisions)",
		"imageFile": ["ByCurveAndDivisions (curve, divisions)"],
		"dynFile": ["ByCurveAndDivisions (curve, divisions)"],
		"folderPath": "Revit/Elements/DividedPath/Create",
		"inDepth": "Creates a Revit divided path on the given curve with specified amount of division. This will only apply in adaptive component or mass families."
	}, {
		"Name": "ByCurvesAndDivisions (curve, divisions)",
		"imageFile": ["ByCurvesAndDivisions (curve, divisions)"],
		"dynFile": ["ByCurvesAndDivisions (curve, divisions)"],
		"folderPath": "Revit/Elements/DividedPath/Create",
		"inDepth": "Creates a Revit divided path on the given curves with specified amount of division. This will only apply in adaptive component or mass families."
	}, {
		"Name": "Spacing Rule Layout",
		"imageFile": ["Spacing Rule Layout"],
		"dynFile": ["Spacing Rule Layout"],
		"folderPath": "Revit/Elements/DividedPath/Action",
		"inDepth": "A spacing rule layout for calculating divided paths. This includes fixed distance, fixed number, minimum spacing, maximum spacing, or none."
	}, {
		"Name": "Points",
		"imageFile": ["Points"],
		"dynFile": ["Points"],
		"folderPath": "Revit/Elements/DividedPath/Query",
		"inDepth": "The points of an underlying mesh are useful for querying elevation or location data. Point sets can be manipulated in Dynamo and fed back into Dynamo as a new topography."
	}, {
		"Name": "ByFaceAndUVDivisions (elementFace, uDivs, vDivs)",
		"imageFile": ["ByFaceAndUVDivisions (elementFace, uDivs, vDivs)"],
		"dynFile": ["ByFaceAndUVDivisions (elementFace, uDivs, vDivs)"],
		"folderPath": "Revit/Elements/DividedSurface/Create",
		"inDepth": "Create a Revit DividedSurface on a face given the face and number of divisions in u and v directon. This will only apply in adaptive component or mass families."
	}, {
		"Name": "ByFaceUVDivisionsAndRotation (surface, uDivs, vDivs, gridRotation)",
		"imageFile": ["ByFaceUVDivisionsAndRotation (surface, uDivs, vDivs, gridRotation)"],
		"dynFile": ["ByFaceUVDivisionsAndRotation (surface, uDivs, vDivs, gridRotation)"],
		"folderPath": "Revit/Elements/DividedSurface/Create",
		"inDepth": "Create a Revit DividedSurface on a face given the face and number of divisions in u and v direction and the rotation of the grid lines with respect to the natural UV parameterization of the face. This will only apply in adaptive component or mass families."
	}, {
		"Name": "Rotation",
		"imageFile": ["Rotation"],
		"dynFile": ["Rotation"],
		"folderPath": "Revit/Elements/DividedSurface/Query",
		"inDepth": "The rotation of the grid lines is returned as a double."
	}, {
		"Name": "UDivisions",
		"imageFile": ["UDivisions"],
		"dynFile": ["UDivisions"],
		"folderPath": "Revit/Elements/DividedSurface/Query",
		"inDepth": "The number of U divisions is returned as an integer."
	}, {
		"Name": "VDivisions",
		"imageFile": ["VDivisions"],
		"dynFile": ["VDivisions"],
		"folderPath": "Revit/Elements/DividedSurface/Query",
		"inDepth": "The number of V divisions is returned as an integer."
	}, {
		"Name": "AreJoined",
		"imageFile": ["AreJoined"],
		"dynFile": ["AreJoined"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": ""
	}, {
		"Name": "Geometry",
		"imageFile": ["Geometry"],
		"dynFile": ["Geometry"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "Geometry brings the underlying geometry of a Revit element into Dynamo. For example, this node will extract a solid from a column. Revit elements can have multiple base geometries and types."
	}, {
		"Name": "GetHostedElements",
		"imageFile": ["GetHostedElements"],
		"dynFile": ["GetHostedElements"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "Collect all the content that is hosted to the element.IncludeOpenings means get all hosted elements, such as openings, windows, and doors. IncludeShadows means use this node when two walls are joined (by Modify->Geometry->Join), and a door is placed on one of the joined walls. If includeShadow is set to true, then Revit returns the door element ID. IncludeEmbeddedWalls means get the entire embedded wall or curtain wall. IncludeSharedEmbeddedInserts means get the door, window, or other inserts that are hosted in the embedded wall."
	}, {
		"Name": "GetIntersectingElementsOfCategory",
		"imageFile": ["GetIntersectingElementsOfCategory"],
		"dynFile": ["GetIntersectingElementsOfCategory"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": ""
	}, {
		"Name": "GetJoinedElements",
		"imageFile": ["GetJoinedElements"],
		"dynFile": ["GetJoinedElements"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": ""
	}, {
		"Name": "GetLocation",
		"imageFile": ["GetLocation"],
		"dynFile": ["GetLocation"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "GetLocation will return a point in Dynamo that represents the location of each input Revit element. The location of an element is generally determined by its insertion point. For example, the point location of a cylindrical foundation pile is at the top center."
	}, {
		"Name": "GetMaterials",
		"imageFile": ["GetMaterials"],
		"dynFile": ["GetMaterials"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "GetMaterials will return all materials (and their ids) that exist in a Revit element. Elements with multiple materials will return a list for each element."
	}, {
		"Name": "GetParameterValueByName",
		"imageFile": ["GetParameterValueByName"],
		"dynFile": ["GetParameterValueByName"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "GetParameterValueByName will return the value of an element's parameter given the parameter name as a string. This can be useful for querying a list of element parameters."
	}, {
		"Name": "JoinGeometry",
		"imageFile": ["JoinGeometry"],
		"dynFile": ["JoinGeometry"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": ""
	}, {
		"Name": "MoveByVector",
		"imageFile": ["MoveByVector"],
		"dynFile": ["MoveByVector"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "Move Revit Element by Vector. Input Revit element and vector to move."
	}, {
		"Name": "OverrideColorInView",
		"imageFile": ["OverrideColorInView"],
		"dynFile": ["OverrideColorInView"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "OverrideColorInView will change the element's color in the active view regardless of the current model display style. For example, an element with an overridden color will display the same in Wireframe, Hidden Line, and Shaded views styles."
	}, {
		"Name": "OverrideInView",
		"imageFile": ["OverrideInView.gif"],
		"dynFile": ["OverrideInView"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "OverrideInView will alter the graphics settings of input elements. The override created in Dynamo will dynamically change in Revit."
	}, {
		"Name": "SetGeometryJoinOrder",
		"imageFile": ["SetGeometryJoinOrder"],
		"dynFile": ["SetGeometryJoinOrder"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": ""
	}, {
		"Name": "SetLocation",
		"imageFile": ["SetLocation"],
		"dynFile": ["SetLocation"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "SetLocation will move a Revit element to a new location defined by a point in Dynamo."
	}, {
		"Name": "SetPinnedStatus",
		"imageFile": ["SetPinnedStatus"],
		"dynFile": ["SetPinnedStatus"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": ""
	}, {
		"Name": "SetParameterByName",
		"imageFile": ["SetParameterByName"],
		"dynFile": ["SetParameterByName"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "SetParameterByName will modify a Revit element's parameter given its name and a value. This can be updated live from Dynamo."
	}, {
		"Name": "ToString",
		"imageFile": ["ToString"],
		"dynFile": ["ToString"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": "A basic implementation of ToString for Elements."
	}, {
		"Name": "UnjoinAllGeometry",
		"imageFile": ["UnjoinAllGeometry"],
		"dynFile": ["UnjoinAllGeometry"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": ""
	}, {
		"Name": "UnjoinGeometry",
		"imageFile": ["UnjoinGeometry"],
		"dynFile": ["UnjoinGeometry"],
		"folderPath": "Revit/Elements/Element/Action",
		"inDepth": ""
	}, {
		"Name": "BoundingBox",
		"imageFile": ["BoundingBox"],
		"dynFile": ["BoundingBox"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "BoundingBox will create a bounding box in Dynamo around a Revit element."
	}, {
		"Name": "Curves",
		"imageFile": ["Curves"],
		"dynFile": ["Curves"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "A revision cloud's curves are returned as geometry in Dynamo."
	}, {
		"Name": "ElementCurveReferences",
		"imageFile": ["ElementCurveReferences"],
		"dynFile": ["ElementCurveReferences"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "ElementCurveReferences finds a CurveReferences in a Revit element. "
	}, {
		"Name": "ElementFaceReferences",
		"imageFile": ["ElementFaceReferences"],
		"dynFile": ["ElementFaceReferences"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "ElementFaceReferences finds all FaceReferences in a Revit element. The node can query a list of elements for faces even if some elements do not contain any. Those elements are simply returned as empty lists."
	}, {
		"Name": "ElementType",
		"imageFile": ["ElementType"],
		"dynFile": ["ElementType"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "ElementType returns the FamilyType and its id for each input element. This node is useful for querying all FamilyTypes being used, for example, within a category or on a certain level."
	}, {
		"Name": "Faces",
		"imageFile": ["Faces"],
		"dynFile": ["Faces"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "Faces will return all the faces of a Revit element as surfaces in Dynamo."
	}, {
		"Name": "GetCategory",
		"imageFile": ["GetCategory"],
		"dynFile": ["GetCategory"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "GetCategory will return the category of an element or list of elements. This node is useful for querying large collections of elements for certain categories."
	}, {
		"Name": "Id",
		"imageFile": ["Id"],
		"dynFile": ["Id"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "Id returns a parameter's id as an integer."
	}, {
		"Name": "IsPinned",
		"imageFile": ["IsPinned"],
		"dynFile": ["IsPinned"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": ""
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "Name returns an element's name as a string. Converting an element's name to a string simplifies the data type, making it more flexible for data manipulation (for example, in a boolean mask)."
	}, {
		"Name": "Parameters",
		"imageFile": ["Parameters"],
		"dynFile": ["Parameters"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "Parameters returns all parameters in an element. This is useful for checking what is being defined by element versus by family or family type. The output can be passed into Parameter.IsReadOnly to show a parameter's writability."
	}, {
		"Name": "Solids",
		"imageFile": ["Solids"],
		"dynFile": ["Solids"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "Solids brings the underlying solids of a Revit element into Dynamo. Revit elements can contain multiple solids."
	}, {
		"Name": "UniqueId",
		"imageFile": ["UniqueId"],
		"dynFile": ["UniqueId"],
		"folderPath": "Revit/Elements/Element/Query",
		"inDepth": "UniqueId returns the unique string identifier of an element. A unique Id remains unique across multiple local files in a work-sharing environment. It is different from an element Id, which is only unique in a single file."
	}, {
		"Name": "Description",
		"imageFile": ["Description"],
		"dynFile": ["Description"],
		"folderPath": "Revit/Elements/FailureMessage/Query",
		"inDepth": "The description of the message."
	}, {
		"Name": "FailingElements",
		"imageFile": ["FailingElements"],
		"dynFile": ["FailingElements"],
		"folderPath": "Revit/Elements/FailureMessage/Query",
		"inDepth": "Retrieves the elements that are failing the test."
	}, {
		"Name": "Severity",
		"imageFile": ["Severity"],
		"dynFile": ["Severity"],
		"folderPath": "Revit/Elements/FailureMessage/Query",
		"inDepth": "Get the failure severity."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/Family/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/Family/Query",
		"inDepth": "Name returns the name of a Family as a string."
	}, {
		"Name": "Types",
		"imageFile": ["Types"],
		"dynFile": ["Types"],
		"folderPath": "Revit/Elements/Family/Query",
		"inDepth": "Types returns all FamilyTypes that exist in a Family."
	}, {
		"Name": "ByCoordinates",
		"imageFile": ["ByCoordinates.gif"],
		"dynFile": ["ByCoordinates"],
		"folderPath": "Revit/Elements/FamilyInstance/Create",
		"inDepth": "Place a family instance given the X,Y,Z coordinates."
	}, {
		"Name": "ByFace (familyType, face, line)",
		"imageFile": ["ByFace (familyType, face, line)"],
		"dynFile": ["ByFace (familyType, face, line)"],
		"folderPath": "Revit/Elements/FamilyInstance/Create",
		"inDepth": "Place a Revit family instance of the given the FamilyType (also known as the FamilySymbol in the Revit API) on a surface derived from a backing Revit face as reference and a line as reference for its position. Note: The FamilyPlacementType must be CurveBased and the input surface must be created from a Revit Face."
	}, {
		"Name": "ByFace (familyType, face, location, referenceDirection)",
		"imageFile": ["ByFace (familyType, face, location, referenceDirection)"],
		"dynFile": ["ByFace (familyType, face, location, referenceDirection)"],
		"folderPath": "Revit/Elements/FamilyInstance/Create",
		"inDepth": "Place a Revit family instance given the FamilyType (also known as the FamilySymbol in the Revit API) on a surface derived from a backing Revit face as reference, a reference direction and a point location where to place the family. Note: The FamilyType should be workplane based and the input surface must be created from a Revit Face. The reference direction defines the rotation of the instance on the reference, and thus cannot be perpendicular to the face."
	}, {
		"Name": "ByPoint",
		"imageFile": ["ByPoint.gif"],
		"dynFile": ["ByPoint"],
		"folderPath": "Revit/Elements/FamilyInstance/Create",
		"inDepth": "Place a family instance given a point."
	}, {
		"Name": "ByPointAndLevel",
		"imageFile": ["ByPointAndLevel.gif"],
		"dynFile": ["ByPointAndLevel"],
		"folderPath": "Revit/Elements/FamilyInstance/Create",
		"inDepth": "ByPointAndLevel uses a point in Dynamo and Revit level to place a FamilyInstance. This is useful for placing large collections of families across multiple levels. The point location and the FamilyInstance within Revit are dynamically linked, allowing real-time manipulation from Dynamo."
	}, {
		"Name": "ByFamilyType",
		"imageFile": ["ByFamilyType"],
		"dynFile": ["ByFamilyType"],
		"folderPath": "Revit/Elements/FamilyInstance/Action",
		"inDepth": "ByFamilyType returns all FamilyInstances occurring in Revit of a specified Family. FamilyInstance is the bottom level in the Family, Type, and Instance heirarchy and is an element in the Revit file that can be queried for its location, count, and other instance specific qualities."
	}, {
		"Name": "SetRotation",
		"imageFile": ["SetRotation.gif"],
		"dynFile": ["SetRotation"],
		"folderPath": "Revit/Elements/FamilyInstance/Action",
		"inDepth": "SetRotation allows the rotation of a FamilyInstance from within Dynamo. Since FamilyInstances are individual elements in a Revit file, each can be rotated to a different angle. This can be particularly useful for placing a FamilyInstance in an arc pattern, as each instance has a unique rotation."
	}, {
		"Name": "FacingOrientation",
		"imageFile": ["FacingOrientation"],
		"dynFile": ["FacingOrientation"],
		"folderPath": "Revit/Elements/FamilyInstance/Query",
		"inDepth": "FacingOrientation returns a vector describing the orientation of a FamilyInstance. This can be used to determine how much an instance has been rotated."
	}, {
		"Name": "GetFamily",
		"imageFile": ["GetFamily"],
		"dynFile": ["GetFamily"],
		"folderPath": "Revit/Elements/FamilyInstance/Query",
		"inDepth": "GetFamily returns the Family of a FamilyInstance. Family is the top level in the Family, Type, and Instance heirarchy where global, functional parameters are defined."
	}, {
		"Name": "GetHost",
		"imageFile": ["GetHost"],
		"dynFile": ["GetHost"],
		"folderPath": "Revit/Elements/FamilyInstance/Query",
		"inDepth": "GetHost returns the element(s) that hosts a specific FamilyType. Common hosted elements in Revit are doors, windows, and elements of curtain systems."
	}, {
		"Name": "Location",
		"imageFile": ["Location"],
		"dynFile": ["Location"],
		"folderPath": "Revit/Elements/FamilyInstance/Query",
		"inDepth": "Structural elements have an underlying location line that can be displayed in Revit. This is useful for identifying points of complex framing joins and visualizing offsets."
	}, {
		"Name": "ByFamilyAndName",
		"imageFile": ["ByFamilyAndName"],
		"dynFile": ["ByFamilyAndName"],
		"folderPath": "Revit/Elements/FamilyType/Create",
		"inDepth": "ByFamilyAndName returns FamilyTypes given input Families and FamilyType names as strings. This can be used to get multiple Types within a Family, or all Types of the same name across multiple Families."
	}, {
		"Name": "ByFamilyNameAndTypeName",
		"imageFile": ["ByFamilyNameAndTypeName"],
		"dynFile": ["ByFamilyNameAndTypeName"],
		"folderPath": "Revit/Elements/FamilyType/Create",
		"inDepth": "ByFamilyNameAndTypeName returns FamilyTypes given input string names for Families and FamilyTypes. This can be used to get multiple Types within a Family, or all Types of the same name across multiple Families."
	}, {
		"Name": "ByGeometry",
		"imageFile": ["ByGeometry"],
		"dynFile": ["ByGeometry"],
		"folderPath": "Revit/Elements/FamilyType/Create",
		"inDepth": "ByGeometry brings each input geometry into Revit as an individual Import Instance element. An Import Instance is identified as an Import Symbol in Revit."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/FamilyType/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "VoidByGeometry",
		"imageFile": ["VoidByGeometry"],
		"dynFile": ["VoidByGeometry"],
		"folderPath": "Revit/Elements/FamilyType/Create",
		"inDepth": "Create a Void Family Type from a solid geometry. This method exports the solid to SAT and imports it into a new family document. Couple with family instance placement, this node can be used for powerful project workflows."
	}, {
		"Name": "Family",
		"imageFile": ["Family"],
		"dynFile": ["Family"],
		"folderPath": "Revit/Elements/FamilyType/Query",
		"inDepth": "Family returns a parent Family for each FamilyType input, even if the Parent is the same across all types."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/FamilyType/Query",
		"inDepth": "Name returns the name of a FamilyType as a string. Names as strings are useful for data manipulation and creating boolean masks."
	}, {
		"Name": "GetByName",
		"imageFile": ["GetByName"],
		"dynFile": ["GetByName"],
		"folderPath": "Revit/Elements/FilledPatternElement/Create",
		"inDepth": "GetByName returns a line pattern element from it's name as a string. Selecting line pattern elements by string allows for data manipulation and searching, even from external data sources (Excel)."
	}, {
		"Name": "ByCurves",
		"imageFile": ["ByCurves"],
		"dynFile": ["ByCurves"],
		"folderPath": "Revit/Elements/FilledRegion/Create",
		"inDepth": "ByCurves creates a filled region from a list of curves. Filled regions can be easily generated from Rooms to create drawing graphics. Polycurves must be exploded into lists of curves to create filled regions."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/FilledRegionType/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "Select Filled Region Type",
		"imageFile": ["Select Filled Region Type"],
		"dynFile": ["Select Filled Region Type"],
		"folderPath": "Revit/Elements/FilledRegionType/Action",
		"inDepth": "Select Filled Region Type brings a Filled Region Type element into Dynamo. The node's dropdown menu contains every Filled Region Type in the active document and is useful determining the type of multiple Filled Regions from Dynamo."
	}, {
		"Name": "Color",
		"imageFile": ["Color"],
		"dynFile": ["Color"],
		"folderPath": "Revit/Elements/FilledRegionType/Query",
		"inDepth": "Material color is returned as a Dynamo color with A,R,G,B values."
	}, {
		"Name": "FillPatternId",
		"imageFile": ["FillPatternId"],
		"dynFile": ["FillPatternId"],
		"folderPath": "Revit/Elements/FilledRegionType/Query",
		"inDepth": "FillPatternId returns an integer representing an input Fill Pattern's Id."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/FilledRegionType/Query",
		"inDepth": "Name returns the name of a FillRegionType as a string. String outputs are useful for data filtering and creating boolean masks."
	}, {
		"Name": "ByOutlineTypeAndLevel (outline, floorType, level)",
		"imageFile": ["ByOutlineTypeAndLevel (outline, floorType, level).gif"],
		"dynFile": ["ByOutlineTypeAndLevel (outline, floorType, level)"],
		"folderPath": "Revit/Elements/Floor/Create",
		"inDepth": "ByOutlineTypeAndLevel creates floors from Polycurves. Floors will be dynamically added and removed from the Revit document by adjusting inputs in Dynamo."
	}, {
		"Name": "ByOutlineTypeAndLevel (outlineCurves, floorType, level)",
		"imageFile": ["ByOutlineTypeAndLevel (outlineCurves, floorType, level).gif"],
		"dynFile": ["ByOutlineTypeAndLevel (outlineCurves, floorType, level)"],
		"folderPath": "Revit/Elements/Floor/Create",
		"inDepth": "ByOutlineTypeAndLevel creates floors from lists of curves that define outlines. Floors will be dynamically added and removed from the Revit document by adjusting inputs in Dynamo."
	}, {
		"Name": "AddPoint",
		"imageFile": ["AddPoint"],
		"dynFile": ["AddPoint"],
		"folderPath": "Revit/Elements/Floor/Action",
		"inDepth": "Add Point to Slab Shape."
	}, {
		"Name": "MovePoint",
		"imageFile": ["MovePoint"],
		"dynFile": ["MovePoint"],
		"folderPath": "Revit/Elements/Floor/Action",
		"inDepth": "Move an existing point in the slab shape editor by an offset. Behaves as moving a point manually in the slab shape editor."
	}, {
		"Name": "Points",
		"imageFile": ["Points"],
		"dynFile": ["Points"],
		"folderPath": "Revit/Elements/Floor/Query",
		"inDepth": "The points of an underlying mesh are useful for querying elevation or location data. Point sets can be manipulated in Dynamo and fed back into Dynamo as a new topography."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/FloorType/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/FloorType/Query",
		"inDepth": "Name returns the name of a FloorType element as a string. String outputs are useful for data filtering and creating boolean masks."
	}, {
		"Name": "ByLoftCrossSections (curves, isSolid)",
		"imageFile": ["ByLoftCrossSections (curves, isSolid)"],
		"dynFile": ["ByLoftCrossSections (curves, isSolid)"],
		"folderPath": "Revit/Elements/Form/Create",
		"inDepth": "Revit forms are generally used to explore building concepts. They must be created in the conceptual design environment."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/GlobalParameter/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "FindByName",
		"imageFile": ["FindByName"],
		"dynFile": ["FindByName"],
		"folderPath": "Revit/Elements/GlobalParameter/Create",
		"inDepth": "Find Global Parameter by Name."
	}, {
		"Name": "SetValue",
		"imageFile": ["SetValue"],
		"dynFile": ["SetValue"],
		"folderPath": "Revit/Elements/GlobalParameter/Action",
		"inDepth": "Setting an element's parameter from Dynamo will override its value in Revit if it is not read-only (writable). This can be checked with the Parameter.IsReadOnly node."
	}, {
		"Name": "SetValueToElementId",
		"imageFile": ["SetValueToElementId"],
		"dynFile": ["SetValueToElementId"],
		"folderPath": "Revit/Elements/GlobalParameter/Action",
		"inDepth": "Set Global Parameter Value to an Element ID from Integer."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/GlobalParameter/Query",
		"inDepth": "The name of the given global parameter."
	}, {
		"Name": "ParameterGroup",
		"imageFile": ["ParameterGroup"],
		"dynFile": ["ParameterGroup"],
		"folderPath": "Revit/Elements/GlobalParameter/Query",
		"inDepth": "Get Parameter Group, given a global parameter."
	}, {
		"Name": "ParameterType",
		"imageFile": ["ParameterType"],
		"dynFile": ["ParameterType"],
		"folderPath": "Revit/Elements/GlobalParameter/Query",
		"inDepth": "ParameterType returns a parameter's type as a string. Examples of parameter types are Text, Material, Image, and URL. These can be chosen when creating family types in Revit. This is also useful for data searching and filtering in Dynamo."
	}, {
		"Name": "Value",
		"imageFile": ["Value"],
		"dynFile": ["Value"],
		"folderPath": "Revit/Elements/GlobalParameter/Query",
		"inDepth": "Get Global Parameter Value"
	}, {
		"Name": "Visible",
		"imageFile": ["Visible"],
		"dynFile": ["Visible"],
		"folderPath": "Revit/Elements/GlobalParameter/Query",
		"inDepth": "Get Parameter Visibility."
	}, {
		"Name": "ByArc",
		"imageFile": ["ByArc"],
		"dynFile": ["ByArc"],
		"folderPath": "Revit/Elements/Grid/Create",
		"inDepth": "ByArc creates an arc Grid element defined by a center, radius, start angle, end angle, and a vector to rotate around. This node is useful for defining large collections of grid elements from static inputs. Dynamically adjusting the Grid element's parameters will create new elements."
	}, {
		"Name": "ByLine",
		"imageFile": ["ByLine"],
		"dynFile": ["ByLine"],
		"folderPath": "Revit/Elements/Grid/Create",
		"inDepth": "Reference planes can be created in both Revit projects and families. The reference plane in Revit does not dynamically change with its Dynamo inputs."
	}, {
		"Name": "ByStartPointEndPoint",
		"imageFile": ["ByStartPointEndPoint"],
		"dynFile": ["ByStartPointEndPoint"],
		"folderPath": "Revit/Elements/Grid/Create",
		"inDepth": "Reference planes can be created in both Revit projects and families. The reference plane in Revit does not dynamically change with its Dynamo inputs."
	}, {
		"Name": "Curve",
		"imageFile": ["Curve"],
		"dynFile": ["Curve"],
		"folderPath": "Revit/Elements/Grid/Query",
		"inDepth": "The underlying curves are returned as geometry in Dynamo. Rectilinear Grid elements return underlying geometry consisting of lines."
	}, {
		"Name": "ElementCurveReference",
		"imageFile": ["ElementCurveReference"],
		"dynFile": ["ElementCurveReference"],
		"folderPath": "Revit/Elements/Grid/Query",
		"inDepth": "ElementCurveReference returns the underlying Reference for a Grid element. References are not geometry in model space. They are used in the creation of other elements such as Revit dimensions."
	}, {
		"Name": "ByGeometries",
		"imageFile": ["ByGeometries"],
		"dynFile": ["ByGeometries"],
		"folderPath": "Revit/Elements/ImportInstance/Create",
		"inDepth": "ByGeometries brings all input geometry into Revit as a single Import Instance element. An Import Instance is identified as an Import Symbol in Revit."
	}, {
		"Name": "ByGeometry",
		"imageFile": ["ByGeometry"],
		"dynFile": ["ByGeometry"],
		"folderPath": "Revit/Elements/ImportInstance/Create",
		"inDepth": "ByGeometry brings each input geometry into Revit as an individual Import Instance element. An Import Instance is identified as an Import Symbol in Revit."
	}, {
		"Name": "BySATFile",
		"imageFile": ["BySATFile"],
		"dynFile": ["BySATFile"],
		"folderPath": "Revit/Elements/ImportInstance/Create",
		"inDepth": "BySATFile brings geometry from a SAT file into Revit as a single Import Instance, similar to ImportInstance.ByGeometries. This is useful for directly importing geometry into Revit. An Import Instance is identified as an Import Symbol in Revit. Using BySATFile will bring an Import Instance into Revit at a different scale factor than ByGeometry or ByGeometries."
	}, {
		"Name": "Path",
		"imageFile": ["Path"],
		"dynFile": ["Path"],
		"folderPath": "Revit/Elements/ImportInstance/Query",
		"inDepth": "Path returns the full file path of an Import Instance as a string."
	}, {
		"Name": "ByElevation",
		"imageFile": ["ByElevation.gif"],
		"dynFile": ["ByElevation"],
		"folderPath": "Revit/Elements/Level/Create",
		"inDepth": "Revit levels created from Dynamo will be automatically named in Revit based on existing levels."
	}, {
		"Name": "ByElevationAndName",
		"imageFile": ["ByElevationAndName"],
		"dynFile": ["ByElevationAndName"],
		"folderPath": "Revit/Elements/Level/Create",
		"inDepth": "If the new level's name matches the name of an existing level, it will automatically be renamed with a number. For example, an input name of Level 1 becomes Level 1(1)."
	}, {
		"Name": "ByLevelAndOffset",
		"imageFile": ["ByLevelAndOffset"],
		"dynFile": ["ByLevelAndOffset"],
		"folderPath": "Revit/Elements/Level/Create",
		"inDepth": "ByLevelAndOffset is useful for creating levels relative to existing ones by offsetting from them."
	}, {
		"Name": "ByLevelOffsetAndName",
		"imageFile": ["ByLevelOffsetAndName"],
		"dynFile": ["ByLevelOffsetAndName"],
		"folderPath": "Revit/Elements/Level/Create",
		"inDepth": "If the new level's name matches the name of an existing level, it will automatically be renamed with a number. For example, an input name of Level 1 becomes Level 1(1). Offsetting is useful for creating new levels relative to existing ones."
	}, {
		"Name": "Elevation",
		"imageFile": ["Elevation"],
		"dynFile": ["Elevation"],
		"folderPath": "Revit/Elements/Level/Query",
		"inDepth": "Ground level is generally elevation 0 in project elevations. This is a baseline for measuring all level elevations from. Elevation returns this distance as a double."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/Level/Query",
		"inDepth": "Add in-depth information about Name..."
	}, {
		"Name": "ProjectElevation",
		"imageFile": ["ProjectElevation"],
		"dynFile": ["ProjectElevation"],
		"folderPath": "Revit/Elements/Level/Query",
		"inDepth": "The project origin is the (0,0,0) coordinate location within the Revit project. All coordinates in the Revit project are relative to this point."
	}, {
		"Name": "GetByName",
		"imageFile": ["GetByName"],
		"dynFile": ["GetByName"],
		"folderPath": "Revit/Elements/LinePatternElement/Create",
		"inDepth": "GetByName returns a line pattern element from it's name as a string. Selecting line pattern elements by string allows for data manipulation and searching, even from external data sources (Excel)."
	}, {
		"Name": "Line Patterns",
		"imageFile": ["Line Patterns"],
		"dynFile": ["Line Patterns"],
		"folderPath": "Revit/Elements/LinePatternElement/Action",
		"inDepth": "Line Patterns contains a drop-down menu that allows you to select all line pattern elements in a Revit project."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/Material/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "AppearanceParameters",
		"imageFile": ["AppearanceParameters"],
		"dynFile": ["AppearanceParameters"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material appearance parameters are returned as Revit parameters."
	}, {
		"Name": "Color",
		"imageFile": ["Color"],
		"dynFile": ["Color"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material color is returned as a Dynamo color with A,R,G,B values."
	}, {
		"Name": "CutPatternColor",
		"imageFile": ["CutPatternColor"],
		"dynFile": ["CutPatternColor"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material cut pattern color is returned as a Dynamo color with A,R,G,B values."
	}, {
		"Name": "CutPatternId",
		"imageFile": ["CutPatternId"],
		"dynFile": ["CutPatternId"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material cut pattern id is returned as an integer. An integer of -1 represents the default option in Revit."
	}, {
		"Name": "MaterialCategory",
		"imageFile": ["MaterialCategory"],
		"dynFile": ["MaterialCategory"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material category is returned as a string. This is useful for data manipulation and boolean masks."
	}, {
		"Name": "MaterialClass",
		"imageFile": ["MaterialClass"],
		"dynFile": ["MaterialClass"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material class is returned as a string. This is useful for data manipulation and boolean masks."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material name is returned as a string. This is useful in conjunction with the Element.GetMaterials node for querying materials from elements."
	}, {
		"Name": "Shininess",
		"imageFile": ["Shininess"],
		"dynFile": ["Shininess"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material shininess is returned as an integer."
	}, {
		"Name": "Smoothness",
		"imageFile": ["Smoothness"],
		"dynFile": ["Smoothness"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material smoothness is returned as an integer."
	}, {
		"Name": "StructuralParameters",
		"imageFile": ["StructuralParameters"],
		"dynFile": ["StructuralParameters"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material structural parameters are returned as Revit parameters."
	}, {
		"Name": "SurfacePatternColor",
		"imageFile": ["SurfacePatternColor"],
		"dynFile": ["SurfacePatternColor"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material surface pattern color is returned as a Dynamo color with A,R,G,B values."
	}, {
		"Name": "ThermalParameters",
		"imageFile": ["ThermalParameters"],
		"dynFile": ["ThermalParameters"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material thermal parameters are returned as Revit parameters."
	}, {
		"Name": "Transparency",
		"imageFile": ["Transparency"],
		"dynFile": ["Transparency"],
		"folderPath": "Revit/Elements/Material/Query",
		"inDepth": "Material transparency is returned as an integer."
	}, {
		"Name": "ByCurve",
		"imageFile": ["ByCurve"],
		"dynFile": ["ByCurve"],
		"folderPath": "Revit/Elements/ModelCurve/Create",
		"inDepth": "Revision clouds created in Dynamo depend on the input curves' directions. If the cloud graphic is facing in, reverse the curve direction."
	}, {
		"Name": "ReferenceCurveByCurve",
		"imageFile": ["ReferenceCurveByCurve"],
		"dynFile": ["ReferenceCurveByCurve"],
		"folderPath": "Revit/Elements/ModelCurve/Create",
		"inDepth": "Reference curves are used by Revit to build other elements such as dimensions. They must be created in a family document. Reference curves created from Dynamo cannot be adjusted within Revit while Dynamo is open."
	}, {
		"Name": "ByTextSketchPlaneAndPosition",
		"imageFile": ["ByTextSketchPlaneAndPosition"],
		"dynFile": ["ByTextSketchPlaneAndPosition"],
		"folderPath": "Revit/Elements/ModelText/Create",
		"inDepth": "Model text is a three dimensional text geometry element in Revit and can only be created in a family document."
	}, {
		"Name": "Depth",
		"imageFile": ["Depth"],
		"dynFile": ["Depth"],
		"folderPath": "Revit/Elements/ModelText/Query",
		"inDepth": "The depth of a model text element is returned as a double."
	}, {
		"Name": "Position",
		"imageFile": ["Position"],
		"dynFile": ["Position"],
		"folderPath": "Revit/Elements/ModelText/Query",
		"inDepth": "The position of a model text element is returned as a Dynamo point."
	}, {
		"Name": "Text",
		"imageFile": ["Text"],
		"dynFile": ["Text"],
		"folderPath": "Revit/Elements/ModelText/Query",
		"inDepth": "Text returns the contents of a text note as a string."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/ModelTextType/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "AsFamilyInstance",
		"imageFile": ["AsFamilyInstance"],
		"dynFile": ["AsFamilyInstance"],
		"folderPath": "Revit/Elements/Mullion/Action",
		"inDepth": "Family instances can be returned for mullions if they are one. In Revit, a family instance provides more detailed properties so that the family instance type and appearance can be changed."
	}, {
		"Name": "ByElement",
		"imageFile": ["ByElement"],
		"dynFile": ["ByElement"],
		"folderPath": "Revit/Elements/Mullion/Action",
		"inDepth": "ByElement tags elements relative to their location points. The offset input can be used to reposition the tags with a vector."
	}, {
		"Name": "SupportedPanels",
		"imageFile": ["SupportedPanels"],
		"dynFile": ["SupportedPanels"],
		"folderPath": "Revit/Elements/Mullion/Action",
		"inDepth": "SupportedPanels returns a list of curtain panels for each supporting mullion. A mullion can support multiple curtain panels, so the same curtain panel element may be returned more than once."
	}, {
		"Name": "LocationCurve",
		"imageFile": ["LocationCurve"],
		"dynFile": ["LocationCurve"],
		"folderPath": "Revit/Elements/Mullion/Query",
		"inDepth": "A mullion's location curve is returned as geometry in Dynamo. These location curves reflect the curtain wall's grid in Revit. Mullions are placed flush to the perimeter grid and centered on the inside grid."
	}, {
		"Name": "ParameterByName",
		"imageFile": ["ParameterByName"],
		"dynFile": ["ParameterByName"],
		"folderPath": "Revit/Elements/Parameter/Create",
		"inDepth": "ParameterByName returns both the name and value of an element's parameter."
	}, {
		"Name": "CreateProjectParameter",
		"imageFile": ["CreateProjectParameter"],
		"dynFile": ["CreateProjectParameter"],
		"folderPath": "Revit/Elements/Parameter/Action",
		"inDepth": "Add in-depth information about CreateProjectParameter..."
	}, {
		"Name": "CreateProjectParameterForAllCategories",
		"imageFile": ["CreateProjectParameterForAllCategories"],
		"dynFile": ["CreateProjectParameterForAllCategories"],
		"folderPath": "Revit/Elements/Parameter/Action",
		"inDepth": "Create a new Project Parameter in this current Revit document for all applicable categories. This works by creating a temporary shared parameter file and adding to the file."
	}, {
		"Name": "CreateSharedParameter",
		"imageFile": ["CreateSharedParameter"],
		"dynFile": ["CreateSharedParameter"],
		"folderPath": "Revit/Elements/Parameter/Action",
		"inDepth": "Create a new Project Parameter in this current Revit document for all given categories. This works by creating a temporary shared parameter file and adding to the file."
	}, {
		"Name": "CreateSharedParameterForAllCategories",
		"imageFile": ["CreateSharedParameterForAllCategories"],
		"dynFile": ["CreateSharedParameterForAllCategories"],
		"folderPath": "Revit/Elements/Parameter/Action",
		"inDepth": "Create a new Shared Parameter in the current Revit document for all applicable categories."
	}, {
		"Name": "Select BuiltIn Parameter Group",
		"imageFile": ["Select BuiltIn Parameter Group"],
		"dynFile": ["Select BuiltIn Parameter Group"],
		"folderPath": "Revit/Elements/Parameter/Action",
		"inDepth": "Select a built-in parameter group."
	}, {
		"Name": "Select Parameter Type",
		"imageFile": ["Select Parameter Type"],
		"dynFile": ["Select Parameter Type"],
		"folderPath": "Revit/Elements/Parameter/Action",
		"inDepth": "Select a parameter type from the dropdown."
	}, {
		"Name": "SetValue",
		"imageFile": ["SetValue"],
		"dynFile": ["SetValue"],
		"folderPath": "Revit/Elements/Parameter/Action",
		"inDepth": "Setting an element's parameter from Dynamo will override its value in Revit if it is not read-only (writable). This can be checked with the Parameter.IsReadOnly node."
	}, {
		"Name": "SharedParameterFile",
		"imageFile": ["SharedParameterFile"],
		"dynFile": ["SharedParameterFile"],
		"folderPath": "Revit/Elements/Parameter/Action",
		"inDepth": "Gets the path to the shared parameter file of this document. Outputs the file path as a string."
	}, {
		"Name": "Group",
		"imageFile": ["Group"],
		"dynFile": ["Group"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "Get the parameter's group."
	}, {
		"Name": "HasValue",
		"imageFile": ["HasValue"],
		"dynFile": ["HasValue"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "HasValue returns a list of boolean values based on whether or not a parameter has a value. This can be useful for filtering data with a boolean mask."
	}, {
		"Name": "Id",
		"imageFile": ["Id"],
		"dynFile": ["Id"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "Id returns a parameter's id as an integer."
	}, {
		"Name": "IsReadOnly",
		"imageFile": ["IsReadOnly"],
		"dynFile": ["IsReadOnly"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "IsReadOnly returns a list of boolean values based on whether a parameter is read only. A read only parameter cannot be changed."
	}, {
		"Name": "IsShared",
		"imageFile": ["IsShared"],
		"dynFile": ["IsShared"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "Check if the Parameter is shared. Outputs a boolean which is useful in filtering."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "Name returns parameter names as strings. This is useful for data searching and filtering."
	}, {
		"Name": "ParameterType",
		"imageFile": ["ParameterType"],
		"dynFile": ["ParameterType"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "ParameterType returns a parameter's type as a string. Examples of parameter types are Text, Material, Image, and URL. These can be chosen when creating family types in Revit. This is also useful for data searching and filtering in Dynamo."
	}, {
		"Name": "StorageType",
		"imageFile": ["StorageType"],
		"dynFile": ["StorageType"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "StorageType returns a parameter's storage type as a string. Storage types can be strings, doubles, and ElementIds. This is useful for determining what to supply a parameter with from Dynamo."
	}, {
		"Name": "UnitType",
		"imageFile": ["UnitType"],
		"dynFile": ["UnitType"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "Unit types are similar to storage types, but refer to types in Revit. Examples of unit types are UT_Number and UT_Length. They are returned as strings."
	}, {
		"Name": "Value",
		"imageFile": ["Value"],
		"dynFile": ["Value"],
		"folderPath": "Revit/Elements/Parameter/Query",
		"inDepth": "Value returns the value of each parameter in its respective storage type."
	}, {
		"Name": "ById",
		"imageFile": ["ById"],
		"dynFile": ["ById"],
		"folderPath": "Revit/Elements/PerformanceAdviserRule/Create",
		"inDepth": "Create Performance Adviser Rule by Id. The GUID should contain 32 characters with 4 dashes."
	}, {
		"Name": "Execute",
		"imageFile": ["Execute"],
		"dynFile": ["Execute"],
		"folderPath": "Revit/Elements/PerformanceAdviserRule/Action",
		"inDepth": "Execute the given performance adviser rules."
	}, {
		"Name": "Performance Adviser Rules",
		"imageFile": ["Performance Adviser Rules"],
		"dynFile": ["Performance Adviser Rules"],
		"folderPath": "Revit/Elements/PerformanceAdviserRule/Action",
		"inDepth": "Provides access to all the performance adviser rules available in the document."
	}, {
		"Name": "Description",
		"imageFile": ["Description"],
		"dynFile": ["Description"],
		"folderPath": "Revit/Elements/PerformanceAdviserRule/Query",
		"inDepth": "The description of the rule."
	}, {
		"Name": "Enabled",
		"imageFile": ["Enabled"],
		"dynFile": ["Enabled"],
		"folderPath": "Revit/Elements/PerformanceAdviserRule/Query",
		"inDepth": "A boolean indicating if the rule is activated. To activate, you need to execute the rule."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/PerformanceAdviserRule/Query",
		"inDepth": "The name of the rule."
	}, {
		"Name": "RuleId",
		"imageFile": ["RuleId"],
		"dynFile": ["RuleId"],
		"folderPath": "Revit/Elements/PerformanceAdviserRule/Query",
		"inDepth": "Returns the 32 digit guid of the rule."
	}, {
		"Name": "Select Phase",
		"imageFile": ["Select Phase"],
		"dynFile": ["Select Phase"],
		"folderPath": "Revit/Elements/Phase/Action",
		"inDepth": "The Select Phase node contains a drop-down menu that shows all phases in the Revit document."
	}, {
		"Name": "ByLine",
		"imageFile": ["ByLine"],
		"dynFile": ["ByLine"],
		"folderPath": "Revit/Elements/ReferencePlane/Create",
		"inDepth": "Reference planes can be created in both Revit projects and families. The reference plane in Revit does not dynamically change with its Dynamo inputs."
	}, {
		"Name": "ByStartPointEndPoint",
		"imageFile": ["ByStartPointEndPoint"],
		"dynFile": ["ByStartPointEndPoint"],
		"folderPath": "Revit/Elements/ReferencePlane/Create",
		"inDepth": "Reference planes can be created in both Revit projects and families. The reference plane in Revit does not dynamically change with its Dynamo inputs."
	}, {
		"Name": "ElementPlaneReference",
		"imageFile": ["ElementPlaneReference"],
		"dynFile": ["ElementPlaneReference"],
		"folderPath": "Revit/Elements/ReferencePlane/Query",
		"inDepth": "Get a reference to this plane for downstream Elements requiring it."
	}, {
		"Name": "Plane",
		"imageFile": ["Plane"],
		"dynFile": ["Plane"],
		"folderPath": "Revit/Elements/ReferencePlane/Query",
		"inDepth": "Sketch planes are used in the creation of 2D and 3D geometry in Revit."
	}, {
		"Name": "ByCoordinates",
		"imageFile": ["ByCoordinates"],
		"dynFile": ["ByCoordinates"],
		"folderPath": "Revit/Elements/ReferencePoint/Create",
		"inDepth": "Reference points are created in the Revit conceptual design environment."
	}, {
		"Name": "ByLengthOnCurveReference",
		"imageFile": ["ByLengthOnCurveReference"],
		"dynFile": ["ByLengthOnCurveReference"],
		"folderPath": "Revit/Elements/ReferencePoint/Create",
		"inDepth": "ByLengthOnCurveReference requires an element curve reference from Revit as its input. Reference points are created in the Revit conceptual design environment."
	}, {
		"Name": "ByParameterOnCurveReference",
		"imageFile": ["ByParameterOnCurveReference"],
		"dynFile": ["ByParameterOnCurveReference"],
		"folderPath": "Revit/Elements/ReferencePoint/Create",
		"inDepth": "ByParameterOnCurveReference requires an element curve reference from Revit as its input. Reference points are created in the Revit conceptual design environment."
	}, {
		"Name": "ByParametersOnFaceReference",
		"imageFile": ["ByParametersOnFaceReference"],
		"dynFile": ["ByParametersOnFaceReference"],
		"folderPath": "Revit/Elements/ReferencePoint/Create",
		"inDepth": "ByParametersOnFaceReference requires an element face reference from Revit as its input. Reference points are created in the Revit conceptual design environment."
	}, {
		"Name": "ByPoint",
		"imageFile": ["ByPoint"],
		"dynFile": ["ByPoint"],
		"folderPath": "Revit/Elements/ReferencePoint/Create",
		"inDepth": "Create a reference point from a Dynamo point. Reference points are created in the Revit conceptual design environment."
	}, {
		"Name": "ByPointVectorDistance",
		"imageFile": ["ByPointVectorDistance.gif"],
		"dynFile": ["ByPointVectorDistance"],
		"folderPath": "Revit/Elements/ReferencePoint/Create",
		"inDepth": "Create a reference point by point, vector & distance. Reference points are created in the Revit conceptual design environment."
	}, {
		"Name": "Point",
		"imageFile": ["Point"],
		"dynFile": ["Point"],
		"folderPath": "Revit/Elements/ReferencePoint/Query",
		"inDepth": "Point returns a point in Dynamo from the Revit conceptual design environment."
	}, {
		"Name": "X",
		"imageFile": ["X"],
		"dynFile": ["X"],
		"folderPath": "Revit/Elements/ReferencePoint/Query",
		"inDepth": "X returns a double representing a reference point's X coordinate value in the Revit conceptual design environment."
	}, {
		"Name": "XYPlane",
		"imageFile": ["XYPlane"],
		"dynFile": ["XYPlane"],
		"folderPath": "Revit/Elements/ReferencePoint/Query",
		"inDepth": "XYPlane returns a plane in Dynamo from a reference point in the Revit conceptual design environment."
	}, {
		"Name": "XZPlane",
		"imageFile": ["XZPlane"],
		"dynFile": ["XZPlane"],
		"folderPath": "Revit/Elements/ReferencePoint/Query",
		"inDepth": "XZPlane returns a plane in Dynamo from a reference point in the Revit conceptual design environment."
	}, {
		"Name": "Y",
		"imageFile": ["Y"],
		"dynFile": ["Y"],
		"folderPath": "Revit/Elements/ReferencePoint/Query",
		"inDepth": "Y returns a double representing a reference point's Y coordinate value in the Revit conceptual design environment."
	}, {
		"Name": "YZPlane",
		"imageFile": ["YZPlane"],
		"dynFile": ["YZPlane"],
		"folderPath": "Revit/Elements/ReferencePoint/Query",
		"inDepth": "YZPlane returns a plane in Dynamo from a reference point in the Revit conceptual design environment."
	}, {
		"Name": "Z",
		"imageFile": ["Z"],
		"dynFile": ["Z"],
		"folderPath": "Revit/Elements/ReferencePoint/Query",
		"inDepth": "Z returns a double representing a reference point's Z coordinate value in the Revit conceptual design environment."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/Revision/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "Select Revision",
		"imageFile": ["Select Revision"],
		"dynFile": ["Select Revision"],
		"folderPath": "Revit/Elements/Revision/Action",
		"inDepth": "Select Revision contains a drop-down menu that displays every revision in a Revit project."
	}, {
		"Name": "Select Revision Numbering",
		"imageFile": ["Select Revision Numbering"],
		"dynFile": ["Select Revision Numbering"],
		"folderPath": "Revit/Elements/Revision/Action",
		"inDepth": "Select Revision Numbering allows you to choose one of Revit's numbering options (by project or by sheet) from a drop-down menu."
	}, {
		"Name": "Select Revision Number Type",
		"imageFile": ["Select Revision Number Type"],
		"dynFile": ["Select Revision Number Type"],
		"folderPath": "Revit/Elements/Revision/Action",
		"inDepth": "Select Revision Number Type allows you to choose one of Revit's revision numbering types (alphanumeric, numeric, or not numbered) from a drop-down menu."
	}, {
		"Name": "Select Revision Visibility",
		"imageFile": ["Select Revision Visibility"],
		"dynFile": ["Select Revision Visibility"],
		"folderPath": "Revit/Elements/Revision/Action",
		"inDepth": "Select Revision Visibility allows you to choose one of Revit's revision visibility types (cloud and tag, tag, or hidden) from a drop-down menu."
	}, {
		"Name": "SetIssued",
		"imageFile": ["SetIssued"],
		"dynFile": ["SetIssued"],
		"folderPath": "Revit/Elements/Revision/Action",
		"inDepth": "SetIssued inteprets boolean values to set whether or not a revision is issued."
	}, {
		"Name": "SetIssuedBy",
		"imageFile": ["SetIssuedBy"],
		"dynFile": ["SetIssuedBy"],
		"folderPath": "Revit/Elements/Revision/Action",
		"inDepth": "SetIssuedBy writes a string to the Issued By field. Changes to revisions will remain after closing Dynamo."
	}, {
		"Name": "SetIssuedTo",
		"imageFile": ["SetIssuedTo"],
		"dynFile": ["SetIssuedTo"],
		"folderPath": "Revit/Elements/Revision/Action",
		"inDepth": "SetIssuedTo writes a string to the Issued To field. Changes to revisions will remain after closing Dynamo."
	}, {
		"Name": "SetRevisionDate",
		"imageFile": ["SetRevisionDate"],
		"dynFile": ["SetRevisionDate"],
		"folderPath": "Revit/Elements/Revision/Action",
		"inDepth": "SetRevisionDate writes a string to the Date field. Changes to revisions will remain after closing Dynamo."
	}, {
		"Name": "Issued",
		"imageFile": ["Issued"],
		"dynFile": ["Issued"],
		"folderPath": "Revit/Elements/Revision/Query",
		"inDepth": "Issued returns a boolean value for whether or not a revision has been issued."
	}, {
		"Name": "IssuedBy",
		"imageFile": ["IssuedBy"],
		"dynFile": ["IssuedBy"],
		"folderPath": "Revit/Elements/Revision/Query",
		"inDepth": "IssuedBy returns a string from a revision's Issued By field."
	}, {
		"Name": "IssuedTo",
		"imageFile": ["IssuedTo"],
		"dynFile": ["IssuedTo"],
		"folderPath": "Revit/Elements/Revision/Query",
		"inDepth": "IssuedTo returns a string from a revision's Issued To field."
	}, {
		"Name": "ByCurve",
		"imageFile": ["ByCurve"],
		"dynFile": ["ByCurve"],
		"folderPath": "Revit/Elements/RevisionCloud/Create",
		"inDepth": "Revision clouds created in Dynamo depend on the input curves' directions. If the cloud graphic is facing in, reverse the curve direction."
	}, {
		"Name": "Curves",
		"imageFile": ["Curves"],
		"dynFile": ["Curves"],
		"folderPath": "Revit/Elements/RevisionCloud/Query",
		"inDepth": "A revision cloud's curves are returned as geometry in Dynamo."
	}, {
		"Name": "Revision",
		"imageFile": ["Revision"],
		"dynFile": ["Revision"],
		"folderPath": "Revit/Elements/RevisionCloud/Query",
		"inDepth": "Revision returns a Revit revision element and its id in Dynamo."
	}, {
		"Name": "RevisionDate",
		"imageFile": ["RevisionDate"],
		"dynFile": ["RevisionDate"],
		"folderPath": "Revit/Elements/Revision/Query",
		"inDepth": "RevisionDate returns a string from a revision's Date field."
	}, {
		"Name": "ByOutlineExtrusionTypeAndLevel",
		"imageFile": ["ByOutlineExtrusionTypeAndLevel"],
		"dynFile": ["ByOutlineExtrusionTypeAndLevel"],
		"folderPath": "Revit/Elements/Roof/Create",
		"inDepth": "Create an extrusion roof given the appropriate inputs."
	}, {
		"Name": "ByOutlineTypeAndLevel",
		"imageFile": ["ByOutlineTypeAndLevel"],
		"dynFile": ["ByOutlineTypeAndLevel"],
		"folderPath": "Revit/Elements/Roof/Create",
		"inDepth": "Create an extrusion roof given the appropriate inputs."
	}, {
		"Name": "AddPoint",
		"imageFile": ["AddPoint"],
		"dynFile": ["AddPoint"],
		"folderPath": "Revit/Elements/Roof/Action",
		"inDepth": "Add a point to the shape edited roof."
	}, {
		"Name": "MovePoint",
		"imageFile": ["MovePoint"],
		"dynFile": ["MovePoint"],
		"folderPath": "Revit/Elements/Roof/Action",
		"inDepth": "Move a point on the shape edited roof."
	}, {
		"Name": "Points",
		"imageFile": ["Points"],
		"dynFile": ["Points"],
		"folderPath": "Revit/Elements/Roof/Query",
		"inDepth": "The points of an underlying mesh are useful for querying elevation or location data. Point sets can be manipulated in Dynamo and fed back into Dynamo as a new topography."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/RoofType/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/RoofType/Query",
		"inDepth": "The name of the RoofType."
	}, {
		"Name": "ByLocation",
		"imageFile": ["ByLocation"],
		"dynFile": ["ByLocation"],
		"folderPath": "Revit/Elements/Room/Create",
		"inDepth": "ByLocation creates a text note from a point. This is useful for labeling many similar elements in a Revit document as the elements can be queried for their locations."
	}, {
		"Name": "IsInsideRoom",
		"imageFile": ["IsInsideRoom"],
		"dynFile": ["IsInsideRoom"],
		"folderPath": "Revit/Elements/Room/Action",
		"inDepth": "IsInsideRoom returns a boolean value based on whether or not a point is inside a room."
	}, {
		"Name": "SetName",
		"imageFile": ["SetName"],
		"dynFile": ["SetName"],
		"folderPath": "Revit/Elements/Room/Action",
		"inDepth": "SetName overrides the name of a room with the supplied string. The room number '105' in the example below persists because it is not part of the name."
	}, {
		"Name": "SetNumber",
		"imageFile": ["SetNumber"],
		"dynFile": ["SetNumber"],
		"folderPath": "Revit/Elements/Room/Action",
		"inDepth": "SetNumber overrides a room's number with the supplied string."
	}, {
		"Name": "Area",
		"imageFile": ["Area"],
		"dynFile": ["Area"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "Room area is returned as a double."
	}, {
		"Name": "CenterBoundary",
		"imageFile": ["CenterBoundary"],
		"dynFile": ["CenterBoundary"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "CenterBoundary returns room bounding curves that extend to the wall centerline. The boundary curves of different rooms will touch if they share a wall."
	}, {
		"Name": "CoreBoundary",
		"imageFile": ["CoreBoundary"],
		"dynFile": ["CoreBoundary"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "CoreBoundary returns room bounding curves that extend to the wall core boundary. If rooms are separated by walls, their boundary curves will not touch."
	}, {
		"Name": "CoreCenterBoundary",
		"imageFile": ["CoreCenterBoundary"],
		"dynFile": ["CoreCenterBoundary"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "CoreCenterBoundary returns room bounding curves that extend to the wall core centerline. The boundary curves of different rooms will touch if they share a wall."
	}, {
		"Name": "FinishBoundary",
		"imageFile": ["FinishBoundary"],
		"dynFile": ["FinishBoundary"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "FinishBoundary returns room bounding curves that extend to the wall finish boundary. If rooms are separated by walls, their boundary curves will not touch."
	}, {
		"Name": "Height",
		"imageFile": ["Height"],
		"dynFile": ["Height"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "Text note height is returned as a double. The height value is relative to the view scale."
	}, {
		"Name": "Location",
		"imageFile": ["Location"],
		"dynFile": ["Location"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "Structural elements have an underlying location line that can be displayed in Revit. This is useful for identifying points of complex framing joins and visualizing offsets."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "Obtain the name of the input rooms."
	}, {
		"Name": "Number",
		"imageFile": ["Number"],
		"dynFile": ["Number"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "Room numbers are returned as strings."
	}, {
		"Name": "Volume",
		"imageFile": ["Volume"],
		"dynFile": ["Volume"],
		"folderPath": "Revit/Elements/Room/Query",
		"inDepth": "Volume will return the volume of a given solid. In the example below, we start with a cube, and then chamfer the edges to produce a new solid. We can use Volume to find the new volume of this solid."
	}, {
		"Name": "ByPlane",
		"imageFile": ["ByPlane"],
		"dynFile": ["ByPlane"],
		"folderPath": "Revit/Elements/SketchPlane/Create",
		"inDepth": "Sketch planes are used in the creation of 2D and 3D geometry in Revit."
	}, {
		"Name": "ElementPlaneReference",
		"imageFile": ["ElementPlaneReference"],
		"dynFile": ["ElementPlaneReference"],
		"folderPath": "Revit/Elements/SketchPlane/Query",
		"inDepth": "Get an element plane reference from a specified sketch plane."
	}, {
		"Name": "Plane",
		"imageFile": ["Plane"],
		"dynFile": ["Plane"],
		"folderPath": "Revit/Elements/SketchPlane/Query",
		"inDepth": "Sketch planes are used in the creation of 2D and 3D geometry in Revit."
	}, {
		"Name": "BeamByCurve",
		"imageFile": ["BeamByCurve.gif"],
		"dynFile": ["BeamByCurve"],
		"folderPath": "Revit/Elements/StructuralFraming/Create",
		"inDepth": "BeamByCurve creates a beam from curves, associated levels, and a structural framing type. Beams can be updated dynamically and will remain in the Revit file after Dynamo is closed. This node is especially useful for generating extensive and/or non-standard structural models from analytical lines."
	}, {
		"Name": "BraceByCurve",
		"imageFile": ["BraceByCurve.gif"],
		"dynFile": ["BraceByCurve"],
		"folderPath": "Revit/Elements/StructuralFraming/Create",
		"inDepth": "BraceByCurve creates a beam from curves, associated levels, and a structural framing type. Braces can be updated dynamically and will remain in the Revit file after Dynamo is closed. This node is especially useful for generating extensive and/or non-standard structural models from analytical lines."
	}, {
		"Name": "ColumnByCurve",
		"imageFile": ["ColumnByCurve.gif"],
		"dynFile": ["ColumnByCurve"],
		"folderPath": "Revit/Elements/StructuralFraming/Create",
		"inDepth": "ColumnByCurve creates a column from curves, associated levels, and a structural framing type. Columns can be updated dynamically and will remain in the Revit file after Dynamo is closed. This node is especially useful for generating extensive and/or non-standard structural models from analytical lines."
	}, {
		"Name": "Location",
		"imageFile": ["Location"],
		"dynFile": ["Location"],
		"folderPath": "Revit/Elements/StructuralFraming/Query",
		"inDepth": "Structural elements have an underlying location line that can be displayed in Revit. This is useful for identifying points of complex framing joins and visualizing offsets."
	}, {
		"Name": "Beam",
		"imageFile": ["Beam"],
		"dynFile": ["Beam"],
		"folderPath": "Revit/Elements/StructuralType/Query",
		"inDepth": "Returns the structural type of beam."
	}, {
		"Name": "Brace",
		"imageFile": ["Brace"],
		"dynFile": ["Brace"],
		"folderPath": "Revit/Elements/StructuralType/Query",
		"inDepth": "Returns the structural type of Brace..."
	}, {
		"Name": "Column",
		"imageFile": ["Column"],
		"dynFile": ["Column"],
		"folderPath": "Revit/Elements/StructuralType/Query",
		"inDepth": "Returns the structural type of Column..."
	}, {
		"Name": "Footing",
		"imageFile": ["Footing"],
		"dynFile": ["Footing"],
		"folderPath": "Revit/Elements/StructuralType/Query",
		"inDepth": "Returns the structural type of Footing..."
	}, {
		"Name": "NonStructural",
		"imageFile": ["NonStructural"],
		"dynFile": ["NonStructural"],
		"folderPath": "Revit/Elements/StructuralType/Query",
		"inDepth": "Returns the structural type of NonStructural..."
	}, {
		"Name": "Altitude",
		"imageFile": ["Altitude"],
		"dynFile": ["Altitude"],
		"folderPath": "Revit/Elements/SunSettings/Query",
		"inDepth": "The sun's altitude is returned as double. This will update dynamically from Revit."
	}, {
		"Name": "Azimuth",
		"imageFile": ["Azimuth"],
		"dynFile": ["Azimuth"],
		"folderPath": "Revit/Elements/SunSettings/Query",
		"inDepth": "The sun's azimuth is returned as a double. This will update dynamically from Revit."
	}, {
		"Name": "CurrentDateTime",
		"imageFile": ["CurrentDateTime"],
		"dynFile": ["CurrentDateTime"],
		"folderPath": "Revit/Elements/SunSettings/Query",
		"inDepth": "CurrentDateTime returns a DateTime that represents the sun's current position in Revit. This can be queried for the year, month, day, hour, etc using Dynamo's core DateTime nodes."
	}, {
		"Name": "EndDateTime",
		"imageFile": ["EndDateTime"],
		"dynFile": ["EndDateTime"],
		"folderPath": "Revit/Elements/SunSettings/Query",
		"inDepth": "EndDateTime returns a DateTime that represents the end of a solar study in the Revit sun settings. This can be queried for the year, month, day, hour, etc using Dynamo's core DateTime nodes."
	}, {
		"Name": "StartDateTime",
		"imageFile": ["StartDateTime"],
		"dynFile": ["StartDateTime"],
		"folderPath": "Revit/Elements/SunSettings/Query",
		"inDepth": "EndDateTime returns a DateTime that represents the start of a solar study in the Revit sun settings. This can be queried for the year, month, day, hour, etc using Dynamo's core DateTime nodes."
	}, {
		"Name": "SunDirection",
		"imageFile": ["SunDirection"],
		"dynFile": ["SunDirection"],
		"folderPath": "Revit/Elements/SunSettings/Query",
		"inDepth": "SunDirection returns a vector calculated from the sun's position (azimuth and altitude) relative to the sun path's origin."
	}, {
		"Name": "ByElement",
		"imageFile": ["ByElement"],
		"dynFile": ["ByElement"],
		"folderPath": "Revit/Elements/Tag/Create",
		"inDepth": "ByElement tags elements relative to their location points. The offset input can be used to reposition the tags with a vector."
	}, {
		"Name": "ByElementAndLocation",
		"imageFile": ["ByElementAndLocation"],
		"dynFile": ["ByElementAndLocation"],
		"folderPath": "Revit/Elements/Tag/Create",
		"inDepth": "Create a Revit Tag for a Revit Element at a specified location point."
	}, {
		"Name": "ByElementAndOffset",
		"imageFile": ["ByElementAndOffset"],
		"dynFile": ["ByElementAndOffset"],
		"folderPath": "Revit/Elements/Tag/Create",
		"inDepth": "Create a Revit Tag for a Revit Element at an offset location from the element's view extents."
	}, {
		"Name": "TaggedElement",
		"imageFile": ["TaggedElement"],
		"dynFile": ["TaggedElement"],
		"folderPath": "Revit/Elements/Tag/Query",
		"inDepth": "TaggedElement returns the tagged element for each input tag."
	}, {
		"Name": "TagText",
		"imageFile": ["TagText"],
		"dynFile": ["TagText"],
		"folderPath": "Revit/Elements/Tag/Query",
		"inDepth": "TagText will return a string for each tag."
	}, {
		"Name": "Select Horizontal Text Alignment",
		"imageFile": ["Select Horizontal Text Alignment"],
		"dynFile": ["Select Horizontal Text Alignment"],
		"folderPath": "Revit/Elements/Text/Action",
		"inDepth": "Select Horizontal Text Alignment shows all available horizontal alignment styles (center, left, right) in a drop-down menu."
	}, {
		"Name": "Select Vertical Text Alignment",
		"imageFile": ["Select Vertical Text Alignment"],
		"dynFile": ["Select Vertical Text Alignment"],
		"folderPath": "Revit/Elements/Text/Action",
		"inDepth": "Select Vertical Text Alignment shows all available vertical alignment styles (bottom, middle, top) in a drop-down menu."
	}, {
		"Name": "ByLocation",
		"imageFile": ["ByLocation"],
		"dynFile": ["ByLocation"],
		"folderPath": "Revit/Elements/TextNote/Create",
		"inDepth": "ByLocation creates a text note from a point. This is useful for labeling many similar elements in a Revit document as the elements can be queried for their locations."
	}, {
		"Name": "SetHorizontalAlignment",
		"imageFile": ["SetHorizontalAlignment"],
		"dynFile": ["SetHorizontalAlignment"],
		"folderPath": "Revit/Elements/TextNote/Action",
		"inDepth": "The horizontal alignment value is determined by a string for the possible styles (left, right, center)."
	}, {
		"Name": "SetKeepRotatedTextReadable",
		"imageFile": ["SetKeepRotatedTextReadable"],
		"dynFile": ["SetKeepRotatedTextReadable"],
		"folderPath": "Revit/Elements/TextNote/Action",
		"inDepth": "Rotating text past a certain degree would make it upside-down. SetKeepRotatedTextReadable will automatically flip the text so it always faces up at any rotation value."
	}, {
		"Name": "SetText",
		"imageFile": ["SetText"],
		"dynFile": ["SetText"],
		"folderPath": "Revit/Elements/TextNote/Action",
		"inDepth": "SetText overrides all input text notes with a supplied string."
	}, {
		"Name": "Height",
		"imageFile": ["Height"],
		"dynFile": ["Height"],
		"folderPath": "Revit/Elements/TextNote/Query",
		"inDepth": "Text note height is returned as a double. The height value is relative to the view scale."
	}, {
		"Name": "HorizontalAlignment",
		"imageFile": ["HorizontalAlignment"],
		"dynFile": ["HorizontalAlignment"],
		"folderPath": "Revit/Elements/TextNote/Query",
		"inDepth": "A text note's horizontal alignment is returned as a string."
	}, {
		"Name": "Text",
		"imageFile": ["Text"],
		"dynFile": ["Text"],
		"folderPath": "Revit/Elements/TextNote/Query",
		"inDepth": "Text returns the contents of a text note as a string."
	}, {
		"Name": "Typename",
		"imageFile": ["Typename"],
		"dynFile": ["Typename"],
		"folderPath": "Revit/Elements/TextNote/Query",
		"inDepth": "Typename returns a string for a text note's font size and font (3.5mm Arial, for example)."
	}, {
		"Name": "VerticalAlignment",
		"imageFile": ["VerticalAlignment"],
		"dynFile": ["VerticalAlignment"],
		"folderPath": "Revit/Elements/TextNote/Query",
		"inDepth": "A text note's vertical alignment is returned as a string."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/TextNoteType/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "Default",
		"imageFile": ["Default"],
		"dynFile": ["Default"],
		"folderPath": "Revit/Elements/TextNoteType/Create",
		"inDepth": "Revit projects contain a default text note type that is automatically assigned to text notes."
	}, {
		"Name": "ByPoints",
		"imageFile": ["ByPoints"],
		"dynFile": ["ByPoints"],
		"folderPath": "Revit/Elements/Topography/Create",
		"inDepth": "Revit will generate and contour a mesh from a list of supplied points. The points cannot be collinear."
	}, {
		"Name": "Mesh",
		"imageFile": ["Mesh"],
		"dynFile": ["Mesh"],
		"folderPath": "Revit/Elements/Topography/Query",
		"inDepth": "Mesh returns a Revit topography as a mesh in Dynamo."
	}, {
		"Name": "Points",
		"imageFile": ["Points"],
		"dynFile": ["Points"],
		"folderPath": "Revit/Elements/Topography/Query",
		"inDepth": "The points of an underlying mesh are useful for querying elevation or location data. Point sets can be manipulated in Dynamo and fed back into Dynamo as a new topography."
	}, {
		"Name": "ByCurveAndHeight",
		"imageFile": ["ByCurveAndHeight"],
		"dynFile": ["ByCurveAndHeight"],
		"folderPath": "Revit/Elements/Wall/Create",
		"inDepth": "Walls created from Dynamo can be updated dynamically and will remain in the Revit document after Dynamo is closed."
	}, {
		"Name": "ByCurveAndLevels",
		"imageFile": ["ByCurveAndLevels"],
		"dynFile": ["ByCurveAndLevels"],
		"folderPath": "Revit/Elements/Wall/Create",
		"inDepth": "Walls created from Dynamo can be updated dynamically and will remain in the Revit document after Dynamo is closed."
	}, {
		"Name": "ByFace",
		"imageFile": ["ByFace"],
		"dynFile": ["ByFace"],
		"folderPath": "Revit/Elements/Wall/Action",
		"inDepth": "Creates a Wall following the geometry of a surface. Walls by Faces cannot be updated, any geometry change will create a new wall and delete the old one."
	}, {
		"Name": "Wall Location",
		"imageFile": ["Wall Location"],
		"dynFile": ["Wall Location"],
		"folderPath": "Revit/Elements/Wall/Action",
		"inDepth": "Wall locations available for use."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Elements/WallType/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Elements/WallType/Query",
		"inDepth": "The name of the input wall type."
	}, {
		"Name": "ByProperties",
		"imageFile": ["ByProperties"],
		"dynFile": ["ByProperties"],
		"folderPath": "Revit/Filter/OverrideGraphicSettings/Create",
		"inDepth": "ByProperties gives access to the visibility/graphic override parameters that exist in Revit. This is especially useful for creating highly specific view overrides that would otherwise require significant manual customization in Revit."
	}, {
		"Name": "Detail Level",
		"imageFile": ["Detail Level"],
		"dynFile": ["Detail Level"],
		"folderPath": "Revit/Filter/OverrideGraphicSettings/Action",
		"inDepth": "Detail Level contains the four Revit detail level settings (Coarse, Fine, Medium, and Undefined). The OverrideGraphicSettings.ByProperties node takes the Detail Level node as an input."
	}, {
		"Name": "ByRules",
		"imageFile": ["ByRules"],
		"dynFile": ["ByRules"],
		"folderPath": "Revit/Filter/ParameterFilterElement/Create",
		"inDepth": "Create a Revit Parameter Filter Element by the given rules."
	}, {
		"Name": "Select Rule Type",
		"imageFile": ["Select Rule Type"],
		"dynFile": ["Select Rule Type"],
		"folderPath": "Revit/Filter/RuleType/Action",
		"inDepth": "String comparisons for rule types."
	}, {
		"Name": "ByOriginDirection",
		"imageFile": ["ByOriginDirection"],
		"dynFile": ["ByOriginDirection"],
		"folderPath": "Revit/References/RayBounce/Action",
		"inDepth": "Ray bounces are a useful for creating studies and analysis in Revit. For example, ray bounces can be used to determine obstructions in line of sight."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Schedules/SchedulableField/Query",
		"inDepth": "The name of the schedulable field."
	}, {
		"Name": "MultipleRows",
		"imageFile": ["MultipleRows"],
		"dynFile": ["MultipleRows"],
		"folderPath": "Revit/Schedules/ScheduleExportOptions_ExportColumnHeaders/Query",
		"inDepth": ""
	}, {
		"Name": "None",
		"imageFile": ["None"],
		"dynFile": ["None"],
		"folderPath": "Revit/Schedules/ScheduleExportOptions_ExportColumnHeaders/Query",
		"inDepth": ""
	}, {
		"Name": "OneRow",
		"imageFile": ["OneRow"],
		"dynFile": ["OneRow"],
		"folderPath": "Revit/Schedules/ScheduleExportOptions_ExportColumnHeaders/Query",
		"inDepth": ""
	}, {
		"Name": "DoubleQuote",
		"imageFile": ["DoubleQuote"],
		"dynFile": ["DoubleQuote"],
		"folderPath": "Revit/Schedules/ScheduleExportOptions_ExportTextQualifier/Query",
		"inDepth": ""
	}, {
		"Name": "None",
		"imageFile": ["None"],
		"dynFile": ["None"],
		"folderPath": "Revit/Schedules/ScheduleExportOptions_ExportTextQualifier/Query",
		"inDepth": ""
	}, {
		"Name": "Quote",
		"imageFile": ["Quote"],
		"dynFile": ["Quote"],
		"folderPath": "Revit/Schedules/ScheduleExportOptions_ExportTextQualifier/Query",
		"inDepth": ""
	}, {
		"Name": "ByProperties",
		"imageFile": ["ByProperties"],
		"dynFile": ["ByProperties"],
		"folderPath": "Revit/Schedules/ScheduleExportOptions/Create",
		"inDepth": "Creates View Schedule Export Options element."
	}, {
		"Name": "Name",
		"imageFile": ["Name"],
		"dynFile": ["Name"],
		"folderPath": "Revit/Schedules/ScheduleField/Query",
		"inDepth": "Name of the schedule field."
	}, {
		"Name": "ByFieldTypeAndValue",
		"imageFile": ["ByFieldTypeAndValue"],
		"dynFile": ["ByFieldTypeAndValue"],
		"folderPath": "Revit/Schedules/ScheduleFilter/Create",
		"inDepth": "Creates Schedule Filter by Schedule Field, Filter Type and value."
	}, {
		"Name": "FieldId",
		"imageFile": ["FieldId"],
		"dynFile": ["FieldId"],
		"folderPath": "Revit/Schedules/ScheduleFilter/Query",
		"inDepth": "Related Schedule Field Id."
	}, {
		"Name": "FilterType",
		"imageFile": ["FilterType"],
		"dynFile": ["FilterType"],
		"folderPath": "Revit/Schedules/ScheduleFilter/Query",
		"inDepth": "Filter Type."
	}, {
		"Name": "Value",
		"imageFile": ["Value"],
		"dynFile": ["Value"],
		"folderPath": "Revit/Schedules/ScheduleFilter/Query",
		"inDepth": "The value of the schedule filter."
	}, {
		"Name": "All Elements at Level",
		"imageFile": ["All Elements at Level"],
		"dynFile": ["All Elements at Level"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Use with the Selection.Levels node to get elements associated with any level in a document."
	}, {
		"Name": "All Elements of Category",
		"imageFile": ["All Elements of Category"],
		"dynFile": ["All Elements of Category"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Use with the Selection.Categories node to get all elements in any category in a document."
	}, {
		"Name": "All Elements of Family Type",
		"imageFile": ["All Elements of Family Type"],
		"dynFile": ["All Elements of Family Type"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Use with the Selection.Family Types node to get all elements of any family type in a document."
	}, {
		"Name": "All Elements of Type",
		"imageFile": ["All Elements of Type"],
		"dynFile": ["All Elements of Type"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Use with the Selection.Element Types node to get all elements of any type in a document."
	}, {
		"Name": "Categories",
		"imageFile": ["Categories"],
		"dynFile": ["Categories"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Categories contains a drop-down menu with every category available in a document."
	}, {
		"Name": "Element Types",
		"imageFile": ["Element Types"],
		"dynFile": ["Element Types"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Element Types contains a drop-down menu with every element type available in a document."
	}, {
		"Name": "Family Types",
		"imageFile": ["Family Types"],
		"dynFile": ["Family Types"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Family Types contains a drop-down menu with every family type available in a document."
	}, {
		"Name": "Floor Types",
		"imageFile": ["Floor Types"],
		"dynFile": ["Floor Types"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Floor Types contains a drop-down menu with every floor type available in a document."
	}, {
		"Name": "Get Family Parameter",
		"imageFile": ["Get Family Parameter"],
		"dynFile": ["Get Family Parameter"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Get Family Parameter contains a drop-down menu with all parameters of an input family."
	}, {
		"Name": "Levels",
		"imageFile": ["Levels"],
		"dynFile": ["Levels"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Levels contains a drop-down menu with every level available in a document."
	}, {
		"Name": "Select Divided Surface Families",
		"imageFile": ["Select Divided Surface Families.gif"],
		"dynFile": ["Select Divided Surface Families"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Select a divided surface and get its family instances. This node is to be used in the massing/adaptive family environment."
	}, {
		"Name": "Select Edge",
		"imageFile": ["Select Edge"],
		"dynFile": ["Select Edge"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Select Edge brings up a cursor in Revit that allows you to select a single edge."
	}, {
		"Name": "Select Edges",
		"imageFile": ["Select Edges"],
		"dynFile": ["Select Edges"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Select Edges brings up a cursor in Revit that allows you to select multiple edges."
	}, {
		"Name": "Select Face",
		"imageFile": ["Select Face"],
		"dynFile": ["Select Face"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Select Face brings up a cursor in Revit that allows you to select a single face."
	}, {
		"Name": "Select Faces",
		"imageFile": ["Select Faces"],
		"dynFile": ["Select Faces"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Select Faces brings up a cursor in Revit that allows you to select multiple faces."
	}, {
		"Name": "Select Model Element",
		"imageFile": ["Select Model Element"],
		"dynFile": ["Select Model Element"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Select a model element in the active view of the current document."
	}, {
		"Name": "Select Model Elements",
		"imageFile": ["Select Model Elements"],
		"dynFile": ["Select Model Elements"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Select Model Elements brings up a cursor in Revit that allows you to select multiple elements. Multiple elements must be selected by dragging a selection box around them, they cannot be individually selected."
	}, {
		"Name": "Select Point on Face",
		"imageFile": ["Select Point on Face"],
		"dynFile": ["Select Point on Face"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Select Point on Face brings up a cursor in Revit that allows you to select a point on a face. The face will appear highlighted prior to placing the point."
	}, {
		"Name": "Select UV on Face",
		"imageFile": ["Select UV on Face"],
		"dynFile": ["Select UV on Face"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Select UV on Face brings up a cursor in Revit that allows you to select a UV location on a face. The face will appear highlighted prior to choosing the UV location."
	}, {
		"Name": "Structural Column Types",
		"imageFile": ["Structural Column Types"],
		"dynFile": ["Structural Column Types"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Structural Column Types contains a drop-down menu with every structural column type available in a document."
	}, {
		"Name": "Structural Framing Types",
		"imageFile": ["Structural Framing Types"],
		"dynFile": ["Structural Framing Types"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Structural Framing Types contains a drop-down menu with every structural framing type available in a document."
	}, {
		"Name": "Views",
		"imageFile": ["Views"],
		"dynFile": ["Views"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Views returns all view elements on a sheet in a list."
	}, {
		"Name": "Wall Types",
		"imageFile": ["Wall Types"],
		"dynFile": ["Wall Types"],
		"folderPath": "Revit/Selection/Action",
		"inDepth": "Wall Types contains a drop-down menu with every wall type available in a document."
	}, {
		"Name": "End",
		"imageFile": ["End"],
		"dynFile": ["End"],
		"folderPath": "Revit/Transaction/Transaction/Action",
		"inDepth": "Ends the current Dynamo transaction, returning whatever was passed in. Also gives an additional undo in Revit."
	}, {
		"Name": "Start",
		"imageFile": ["Start"],
		"dynFile": ["Start"],
		"folderPath": "Revit/Transaction/Transaction/Action",
		"inDepth": "Start a transaction if neccesssary, returning whatever was passed in."
	}, {
		"Name": "ByLevelAndAreaScheme",
		"imageFile": ["ByLevelAndAreaScheme"],
		"dynFile": ["ByLevelAndAreaScheme"],
		"folderPath": "Revit/Views/AreaPlanView/Create",
		"inDepth": "Create an Area Plan View at the given Level."
	}, {
		"Name": "ByEyePointAndTarget",
		"imageFile": ["ByEyePointAndTarget.gif"],
		"dynFile": ["ByEyePointAndTarget"],
		"folderPath": "Revit/Views/AxonometricView/Create",
		"inDepth": "Perspective views created from Dynamo will update only by switching to another view and back again. In the example below, the eye point is evaluated at different parameters of a circle to rotate the camera around the model."
	}, {
		"Name": "ByEyePointTargetAndBoundingBox",
		"imageFile": ["ByEyePointTargetAndBoundingBox"],
		"dynFile": ["ByEyePointTargetAndBoundingBox"],
		"folderPath": "Revit/Views/AxonometricView/Create",
		"inDepth": "Create a Revit Axonometric (isometric) View from an Eye position and target position and Bounding Box."
	}, {
		"Name": "ByEyePointTargetAndElement",
		"imageFile": ["ByEyePointTargetAndElement.gif"],
		"dynFile": ["ByEyePointTargetAndElement"],
		"folderPath": "Revit/Views/AxonometricView/Create",
		"inDepth": "ByEyePointTargetAndElement allows you to select and isolate a certain element in the view. This is useful for creating views around specific geometry. Perspective views created from Dynamo will update only by switching to another view and back again."
	}, {
		"Name": "ByLevel",
		"imageFile": ["ByLevel"],
		"dynFile": ["ByLevel"],
		"folderPath": "Revit/Views/CeilingPlanView/Create",
		"inDepth": "ByLevel creates a structural floor plan named after its input level."
	}, {
		"Name": "ByName",
		"imageFile": ["ByName"],
		"dynFile": ["ByName"],
		"folderPath": "Revit/Views/DraftingView/Create",
		"inDepth": "If the name of the drafting view matches an existing one in Dynamo, it will have its unique id added to its name."
	}, {
		"Name": "ByLevel",
		"imageFile": ["ByLevel"],
		"dynFile": ["ByLevel"],
		"folderPath": "Revit/Views/FloorPlanView/Create",
		"inDepth": "ByLevel creates a structural floor plan named after its input level."
	}, {
		"Name": "ByEyePointAndTarget",
		"imageFile": ["ByEyePointAndTarget.gif"],
		"dynFile": ["ByEyePointAndTarget"],
		"folderPath": "Revit/Views/PerspectiveView/Create",
		"inDepth": "Perspective views created from Dynamo will update only by switching to another view and back again. In the example below, the eye point is evaluated at different parameters of a circle to rotate the camera around the model."
	}, {
		"Name": "ByEyePointTargetAndBoundingBox",
		"imageFile": ["ByEyePointTargetAndBoundingBox"],
		"dynFile": ["ByEyePointTargetAndBoundingBox"],
		"folderPath": "Revit/Views/PerspectiveView/Create",
		"inDepth": "ByEyePointTargetAndElement allows you to select and isolate a certain element in the view. This is useful for creating views around specific geometry. Perspective views created from Dynamo will update only by switching to another view and back again."
	}, {
		"Name": "ByEyePointTargetAndElement",
		"imageFile": ["ByEyePointTargetAndElement.gif"],
		"dynFile": ["ByEyePointTargetAndElement"],
		"folderPath": "Revit/Views/PerspectiveView/Create",
		"inDepth": "ByEyePointTargetAndElement allows you to select and isolate a certain element in the view. This is useful for creating views around specific geometry. Perspective views created from Dynamo will update only by switching to another view and back again."
	}, {
		"Name": "Export Column Headers",
		"imageFile": ["Export Column Headers"],
		"dynFile": ["Export Column Headers"],
		"folderPath": "Revit/Views/ScheduleView/Action",
		"inDepth": "Export Column Headers contains a drop-down menu with options to export none, one row, multiple rows of schedule headers. This is in input for the ScheduleExportOptions.ByProperties node."
	}, {
		"Name": "Export Text Qualifier",
		"imageFile": ["Export Text Qualifier"],
		"dynFile": ["Export Text Qualifier"],
		"folderPath": "Revit/Views/ScheduleView/Action",
		"inDepth": "Export Text Qualifier contains a drop-down menu with options for double quotes, quotes and no quotes."
	}, {
		"Name": "Schedule Filter Type",
		"imageFile": ["Schedule Filter Type"],
		"dynFile": ["Schedule Filter Type"],
		"folderPath": "Revit/Views/ScheduleView/Action",
		"inDepth": "A View Schedule Filter Type."
	}, {
		"Name": "Schedule Type",
		"imageFile": ["Schedule Type"],
		"dynFile": ["Schedule Type"],
		"folderPath": "Revit/Views/ScheduleView/Action",
		"inDepth": "Provides access to the different types of schedules available in Revit."
	}, {
		"Name": "ByBoundingBox",
		"imageFile": ["ByBoundingBox"],
		"dynFile": ["ByBoundingBox"],
		"folderPath": "Revit/Views/SectionView/Create",
		"inDepth": "ByBoundingBox uses a bounding box to create a section. The bounding box acts like a section box, cutting through elements and hiding everything beyond."
	}, {
		"Name": "ByCoordinateSystemMinPointMaxPoint",
		"imageFile": ["ByCoordinateSystemMinPointMaxPoint"],
		"dynFile": ["ByCoordinateSystemMinPointMaxPoint"],
		"folderPath": "Revit/Views/SectionView/Create",
		"inDepth": "ByCoordinateSystemMinPointMaxPoint creates a view section from the geometry drivers of a bounding box (min/max point and a coordinate system)."
	}, {
		"Name": "ByNameNumberTitleBlockAndView",
		"imageFile": ["ByNameNumberTitleBlockAndView"],
		"dynFile": ["ByNameNumberTitleBlockAndView"],
		"folderPath": "Revit/Views/Sheet/Create",
		"inDepth": "ByNameNumberTitleBlockAndView can create multiple sheets each with a single view. The lists of sheet names, numbers and views need to match in length."
	}, {
		"Name": "ByNameNumberTitleBlockAndViews",
		"imageFile": ["ByNameNumberTitleBlockAndViews"],
		"dynFile": ["ByNameNumberTitleBlockAndViews"],
		"folderPath": "Revit/Views/Sheet/Create",
		"inDepth": "ByNameNumberTitleBlockAndViews will pack a list of views onto a single sheet."
	}, {
		"Name": "SheetName",
		"imageFile": ["SheetName"],
		"dynFile": ["SheetName"],
		"folderPath": "Revit/Views/Sheet/Query",
		"inDepth": "SheetName returns the names of sheets as strings. This is useful for data manipulation and searching."
	}, {
		"Name": "SheetNumber",
		"imageFile": ["SheetNumber"],
		"dynFile": ["SheetNumber"],
		"folderPath": "Revit/Views/Sheet/Query",
		"inDepth": "SheetNumber returns numbers as strings (A102)."
	}, {
		"Name": "Views",
		"imageFile": ["Views"],
		"dynFile": ["Views"],
		"folderPath": "Revit/Views/Sheet/Query",
		"inDepth": "Views returns all view elements on a sheet in a list."
	}, {
		"Name": "ByLevel",
		"imageFile": ["ByLevel"],
		"dynFile": ["ByLevel"],
		"folderPath": "Revit/Views/StructuralPlanView/Create",
		"inDepth": "ByLevel creates a structural floor plan named after its input level."
	}, {
		"Name": "Current",
		"imageFile": ["Current"],
		"dynFile": ["Current"],
		"folderPath": "Revit/Views/SunSettings/Action",
		"inDepth": "Current returns the Revit document that you are currently working inside of. Switching to another open Revit file or family will change the current document."
	}, {
		"Name": "CreateUniqueViewName",
		"imageFile": ["CreateUniqueViewName"],
		"dynFile": ["CreateUniqueViewName"],
		"folderPath": "Revit/Views/View3D/Action",
		"inDepth": "Unique view names are created by appending a unique id to the name if it already exists."
	}, {
		"Name": "AddFilter",
		"imageFile": ["AddFilter"],
		"dynFile": ["AddFilter"],
		"folderPath": "Revit/Views/View/Action",
		"inDepth": "Filters can be queried from Revit documents as an element type. This allows for an existing filter to be applied to a different view, or a new one can be created."
	}, {
		"Name": "All Elements In Active View",
		"imageFile": ["All Elements In Active View"],
		"dynFile": ["All Elements In Active View"],
		"folderPath": "Revit/Views/View/Action",
		"inDepth": "Views can contain vast quantities of elements, so downstream management of this node's data is very important. For example, this node could be used to override wall graphics in an active floor plan view without having to query the entire project for every wall."
	}, {
		"Name": "ExportAsImage",
		"imageFile": ["ExportAsImage"],
		"dynFile": ["ExportAsImage"],
		"folderPath": "Revit/Views/View/Action",
		"inDepth": "A full file path including the file name and extension must be provided to override the default png extension."
	}, {
		"Name": "FilterOverrides",
		"imageFile": ["FilterOverrides"],
		"dynFile": ["FilterOverrides"],
		"folderPath": "Revit/Views/View/Action",
		"inDepth": "FilterOverrides returns a graphics override element from a Filter. This is useful for applying a filter's graphics settings only to certain elements in a view or across an entire project. A graphics override element can also be created with the OverrideGraphicSettings.ByProperties node."
	}, {
		"Name": "IsViewTemplate",
		"imageFile": ["IsViewTemplate"],
		"dynFile": ["IsViewTemplate"],
		"folderPath": "Revit/Views/View/Action",
		"inDepth": "IsViewTemplate returns a boolean value based on whether or not a view is a template."
	}, {
		"Name": "SetCategoryOverrides",
		"imageFile": ["SetCategoryOverrides"],
		"dynFile": ["SetCategoryOverrides"],
		"folderPath": "Revit/Views/View/Action",
		"inDepth": "SetCategoryOverrides allows a graphic overrides element to be applied to an input category across all input views. This is useful for quickly highlighting walls, floors, curtain walls, etc across many views without creating a view filter or manually changing each view."
	}, {
		"Name": "SetFilterOverrides",
		"imageFile": ["SetFilterOverrides"],
		"dynFile": ["SetFilterOverrides"],
		"folderPath": "Revit/Views/View/Action",
		"inDepth": "SetFilterOverrides allows a view filter to be applied to multiple views and toggled on/off. This is useful for quickly changing the graphics of many views."
	}, {
		"Name": "SetScale",
		"imageFile": ["SetScale"],
		"dynFile": ["SetScale"],
		"folderPath": "Revit/Views/View/Action",
		"inDepth": "A view's scale will update dynamically and remain after Dynamo is closed."
	}, {
		"Name": "Filters",
		"imageFile": ["Filters"],
		"dynFile": ["Filters"],
		"folderPath": "Revit/Views/View/Query",
		"inDepth": "Filters returns any filters applied to a view."
	} 
	]